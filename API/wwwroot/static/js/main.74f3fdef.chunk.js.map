{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/commonStore.ts","app/stores/userStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/commentStore.ts","app/stores/store.ts","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/NavBar.tsx","app/layout/PrivateRoute.tsx","features/errors/ServerError.tsx","features/errors/NotFound.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponents.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateError","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activities","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","setLoadingInitial","state","setActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","setPagination","loadActivities","axiosParams","result","console","log","getActivity","loadActivity","runInAction","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","format","CommonStore","window","localStorage","getItem","appLoaded","setToken","setAppLoaded","setItem","removeItem","UserStore","creds","modalStore","closeModal","logout","getUser","setImage","setDisplayName","name","ModalStore","modal","open","openModal","content","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","p","activityStore","followingCount","loadFollowings","loadUserActivities","CommentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","profileStore","commentStore","StoreContext","createContext","useStore","useContext","observer","Reveal","animated","Content","visible","style","width","Button","fluid","color","hidden","basic","onClick","e","preventDefault","handleFollow","Card","as","Link","to","Image","src","Header","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","Item","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","Menu","vertical","marginTop","icon","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","inverted","fixed","Container","NavLink","exact","header","alt","marginRight","positive","position","avatar","spaced","Dropdown","pointing","text","PrivateRoute","Component","component","rest","isLoggedIn","render","props","message","NotFound","placeholder","Inline","primary","MyTextInput","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","type","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","LoadingComponents","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","relaxed","divided","Extra","TestError","widths","baseUrl","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","menuPosition","Statistic","Divider","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.74f3fdef.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateError = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateError.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateError.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/Activities', { params }).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/Activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/Activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/Activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/Activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/Activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/Account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/Account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/Account/register', user),\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from './profile';\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { format } from 'date-fns';\r\nimport { store } from './store';\r\nimport { Profile } from '../models/profile';\r\nimport { Pagination, PagingParams } from '../models/pagination';\r\n\r\nclass ActivityStore {\r\n    activities = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activities.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activities.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy')\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        );\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(a => a.username === user.username)\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activities.set(activity.id, activity);\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activities.get(id);\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                });\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity };\r\n                    this.activities.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activities.delete(id);\r\n                this.loading = false;\r\n\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a =>\r\n                        a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activities.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activities.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activities.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport default ActivityStore;","import { ServerError } from '../models/serverError';\r\nimport { makeAutoObservable, reaction } from 'mobx';\r\n\r\nclass CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}\r\n\r\nexport default CommonStore;","import { User, UserFormValues } from '../models/user';\r\nimport agent from '../api/agent';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { store } from './store';\r\nimport { history } from '../..';\r\n\r\nclass UserStore {\r\n    user: User | null = null;\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() =>\r\n                this.user = user\r\n            );\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() =>\r\n                this.user = user\r\n            );\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}\r\n\r\nexport default UserStore;","import { makeAutoObservable } from 'mobx';\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nclass ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null,\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}\r\n\r\nexport default ModalStore;","import { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport { store } from './store'\r\nimport agent from '../api/agent';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\n\r\nclass ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default ProfileStore;","import { ChatComment } from '../models/comment';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { store } from './store';\r\n\r\nclass CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on(\"ReceiveComment\", (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log(\"Error stopping connection: \", error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport default CommentStore;","import { createContext, useContext } from 'react';\r\nimport ActivityStore from './activityStore';\r\nimport CommonStore from './commonStore';\r\nimport UserStore from './userStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './profileStore';\r\nimport CommentStore from './commentStore';\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import React, { SyntheticEvent } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { Profile } from '../../app/models/profile';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction FollowButton({ profile }: Props) {\r\n    const { profileStore: { updateFollowing, loading }, userStore } = useStore();\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    const handleFollow = (e: SyntheticEvent, username: string) => {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not following'}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n}\r\n\r\nexport default observer(FollowButton);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfileCard({ profile }: Props) {\r\n    const truncate = (str: string | undefined) => {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileCard);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n\r\n}\r\n\r\nfunction ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'aquamarine',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image\r\n                                size='mini'\r\n                                circular\r\n                                src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityListItemAttendee);","import { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nfunction ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' />{format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' />{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default ActivityListItem;","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nfunction ActivityList() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityList);","import React, { Fragment } from 'react'\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport Calendar from 'react-calendar';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nfunction ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n\r\n    return (\r\n        <Fragment>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: 30}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header  />\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityFilters);","import React, { Fragment } from 'react';\r\nimport { Button, Placeholder, Segment } from 'semantic-ui-react';\r\n\r\nfunction ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ActivityListItemPlaceholder;","import { Fragment, useEffect, useState } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nfunction ActivityDashboard() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activities, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    const handleGetNext = () => {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activities.size <= 1) loadActivities();\r\n    }, [activities.size, loadActivities]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <Fragment>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </Fragment>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDashboard);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nfunction NavBar() {\r\n    const { userStore } = useStore();\r\n    const { user, logout } = userStore;\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default observer(NavBar);","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PrivateRoute;","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nfunction ServerError() {\r\n\r\n    const { commonStore } = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal'  />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default observer(ServerError);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nfunction NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - We looked everywhere and could not find this\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={ Link } to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default NotFound;","import { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nfunction MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default MyTextInput;","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nfunction LoginForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(LoginForm);","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nfunction ValidationErrors({ errors } : Props) {\r\n    return (\r\n        <Message error>\r\n            { errors && (\r\n                <Message.List>\r\n                    { errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>\r\n                            { err }\r\n                        </Message.Item>\r\n                    )) }\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}\r\n\r\nexport default ValidationErrors;","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nfunction RegisterForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button\r\n                        disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting}\r\n                        positive\r\n                        content='Register'\r\n                        type='submit'\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(RegisterForm);","import React, { Fragment } from 'react';\r\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nfunction HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <Fragment>\r\n                        <Header as='h2' inverted content='Welcome to reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </Fragment>\r\n                ) : (\r\n                    <Fragment>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                    </Fragment>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(HomePage);","import { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nfunction LoadingComponents({inverted = true, content='Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content = {content} />\r\n        </Dimmer>\r\n    )\r\n}\r\n\r\nexport default LoadingComponents;","import { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nfunction MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default MyTextArea;","import { useField } from 'formik';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nfunction MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default MySelectInput;","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nfunction MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default MyDateInput;","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponents from '../../../app/layout/LoadingComponents';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {v4 as uuid} from 'uuid';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport {categoryOptions} from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nfunction ActivityForm() {\r\n\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        }\r\n        else \r\n        {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponents content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        {/* <FormField>\r\n                            <MyTextInput placeholder='Title' name='title' />\r\n                            <ErrorMessage name='title' render={error => <Label basic color='red' content={error} />} />\r\n                        </FormField> */}\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date' \r\n                            name='date' \r\n                            showTimeSelect \r\n                            timeCaption='time' \r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button disabled={isSubmitting || !dirty || !isValid} loading={isSubmitting} floated='right' positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityForm);","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Image, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nfunction ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong></p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <Fragment>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activiate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading} />\r\n                        <Button\r\n                            disabled={activity.isCancelled}\r\n                            as={Link} to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </Fragment>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel Attendance</Button>) : (\r\n                    <Button\r\n                        disabled={activity.isCancelled}\r\n                        loading={loading}\r\n                        onClick={updateAttendance}\r\n                        color='teal'\r\n                    >\r\n                        Join Activity\r\n                    </Button>)}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedHeader);","import { observer } from 'mobx-react-lite';\r\nimport { Grid, Icon, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nfunction ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='info' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedInfo);","import { formatDistanceToNow } from 'date-fns';\r\nimport { Field, FieldProps, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Fragment, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Comment, Header, Loader, Segment } from 'semantic-ui-react';\r\nimport * as Yup from 'yup';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nfunction ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            {/* <MyTextArea placeholder='Add comments' name='body' rows={3} />\r\n                                <Button\r\n                                    loading={isSubmitting}\r\n                                    disabled={isSubmitting || !isValid}\r\n                                    content='Add Reply'\r\n                                    labelPosition='left'\r\n                                    icon='edit'\r\n                                    primary\r\n                                    type='submit'\r\n                                    floated='right'\r\n                                /> */}\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (\"ENTER\" to submit, \"SHIFT + ENTER\" for new line)'\r\n                                            rows={3}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedChat);","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, Item, Label, List, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nfunction ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length}{attendees.length === 1 ? ' Person' : ' People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || `/assets/user.png`} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedSidebar);","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponents from '../../../app/layout/LoadingComponents';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nfunction ActivityDetails() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponents />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails);","import axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\nimport React, { Fragment, useState } from 'react';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\n\r\nfunction TestError() {\r\n\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    const handleNotFound = () => {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    const handleBadRequest = () => {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    const handleServerError = () => {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    const handleUnauthorised = () => {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    const handleBadGuid = () => {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    const handleValidationError = () => {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Header as='h1' content='Test Error Component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            { errors &&  \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default TestError;","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nfunction ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default observer(ModalContainer);","import React from 'react'\r\nimport { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nfunction ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={5} placeholder='Add your bio' name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileEditForm);","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nfunction ProfileAbout() {\r\n    const { profileStore: { profile, isCurrentUser } } = useStore();\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileAbout);","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nfunction PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PhotoWidgetDropzone;","import React from 'react';\r\nimport { Cropper } from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nfunction PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: \"100%\" }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PhotoWidgetCropper;","import { Fragment, useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nfunction PhotoUploadWidget({ loading, uploadPhoto }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    const onCrop = () => {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <Fragment>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </Fragment>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default PhotoUploadWidget;","import React, { SyntheticEvent, useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    const handlePhotoUpload = (file: Blob) => {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    const handleSetMainPhoto = (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) => {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    const handleDeletePhoto = (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) => {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                name={photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePhotos);","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nfunction ProfileActivities() {\r\n    const { profileStore: { loadUserActivities, profile, loadingActivities, userActivities } } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileActivities);","import { observer } from 'mobx-react-lite';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nfunction ProfileFollowings() {\r\n    const { profileStore: { profile, followings, loadingFollowings, activeTab } } = useStore();\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileFollowings);","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfileContent({ profile }: Props) {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default observer(ProfileContent);","import { observer } from 'mobx-react-lite';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || `/assets/user.png`} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileHeader);","import { observer } from 'mobx-react-lite';\r\nimport { Fragment, useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponents from '../../app/layout/LoadingComponents';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nfunction ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore: { loadingProfile, loadProfile, profile, setActiveTab } } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponents content='Loading Profile ...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <Fragment>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </Fragment>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePage);","import { Fragment, useEffect } from 'react';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, useLocation, Switch } from 'react-router-dom';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestError from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport LoginForm from '../../features/users/LoginForm';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponents from './LoadingComponents';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore]);\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponents content='Loading app...' />\r\n\r\n  return (\r\n    <Fragment>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <Fragment>\r\n            <NavBar />\r\n            <Container style={{ marginTop: '7em' }}>\r\n              <Switch>\r\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                <PrivateRoute path='/errors' component={TestError} />\r\n                <Route path='/server-error' component={ServerError} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </Fragment>\r\n        )}\r\n      />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nfunction ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default ScrollToTop;","import ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history = {history}>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
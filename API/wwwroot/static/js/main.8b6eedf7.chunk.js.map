{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/commonStore.ts","app/stores/userStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/commentStore.ts","app/stores/store.ts","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/NavBar.tsx","app/layout/PrivateRoute.tsx","features/errors/ServerError.tsx","features/errors/NotFound.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponents.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateError","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activities","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","setLoadingInitial","state","setActivity","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","setPagination","loadActivities","axiosParams","result","console","log","getActivity","loadActivity","runInAction","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","format","CommonStore","window","localStorage","getItem","appLoaded","setToken","setAppLoaded","setItem","removeItem","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","startRefreshTokenTimer","modalStore","closeModal","getUser","setImage","setDisplayName","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","ModalStore","modal","open","openModal","content","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","p","activityStore","followingCount","loadFollowings","loadUserActivities","CommentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","profileStore","commentStore","StoreContext","createContext","useStore","useContext","observer","Reveal","animated","Content","visible","style","width","Button","fluid","color","hidden","basic","onClick","e","preventDefault","handleFollow","Card","as","Link","to","Image","src","Header","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","Item","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","Menu","vertical","marginTop","icon","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","inverted","fixed","Container","NavLink","exact","header","alt","marginRight","positive","position","avatar","spaced","Dropdown","pointing","text","PrivateRoute","Component","component","rest","isLoggedIn","render","props","message","NotFound","placeholder","Inline","primary","MyTextInput","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","type","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","Divider","LoadingComponents","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","relaxed","divided","Extra","TestError","widths","baseUrl","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","menuPosition","Statistic","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"6XAOaA,EAIT,WAAYC,EAASC,GAAyB,yBAH9CD,UAG6C,OAF7CC,gBAE6C,EACzCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA2C,IAA/BC,EAA8B,uDAAjB,EAAGC,EAAc,uDAAH,EAAG,yBAH1CD,gBAG0C,OAF1CC,cAE0C,EACtCH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,GCRxBC,IAAMC,SAASC,QAAUC,OAEzBH,IAAMI,aAAaC,QAAQC,KAAI,SAAAC,GAC3B,IAAMC,EAAQC,EAAMC,YAAYF,MAEhC,OADIA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC7CD,KAGXP,IAAMI,aAAaS,SAASP,IAA5B,+BAAAQ,EAAA,MAAgC,WAAMD,GAAN,eAAAC,EAAA,iFAEtBnB,EAAakB,EAASF,QAAT,YAFS,uBAIxBE,EAASnB,KAAO,IAAID,EAAgBoB,EAASnB,KAAMqB,KAAKC,MAAMrB,IAJtC,kBAKjBkB,GALiB,gCAOrBA,GAPqB,2CAAhC,uDAQG,SAACI,GACA,MAA0CA,EAAMJ,SAAxCnB,EAAR,EAAQA,KAAMwB,EAAd,EAAcA,OAAQX,EAAtB,EAAsBA,OAAQI,EAA9B,EAA8BA,QAC9B,OAAQO,GACJ,KAAK,IAOD,GANoB,kBAATxB,GACPyB,IAAMF,MAAMvB,GAEM,QAAlBa,EAAOa,QAAoB1B,EAAK2B,OAAOC,eAAe,OACtDC,GAAQC,KAAK,cAEb9B,EAAK2B,OAAQ,CACb,IAAMI,EAAkB,GACxB,IAAK,IAAMC,KAAOhC,EAAK2B,OACf3B,EAAK2B,OAAOK,IACZD,EAAgBD,KAAK9B,EAAK2B,OAAOK,IAGzC,MAAMD,EAAgBE,OAE1B,MACJ,KAAK,IACc,MAAXT,GAAkBP,EAAQ,oBAAoBiB,WAAW,kCACzDnB,EAAMoB,UAAUC,SAChBX,IAAMF,MAAM,yCAEhB,MACJ,KAAK,IACDM,GAAQC,KAAK,cACb,MACJ,KAAK,IACDf,EAAMC,YAAYqB,eAAerC,GACjC6B,GAAQC,KAAK,iBAGrB,OAAOQ,QAAQC,OAAOhB,MAG1B,IAAMiB,EAAe,SAAIrB,GAAJ,OAAmCA,EAASnB,MAE3DyC,EACG,SAAIC,GAAJ,OAAoBpC,IAAMqC,IAAOD,GAAKE,KAAKJ,IAD9CC,EAEI,SAAIC,EAAaG,GAAjB,OAA8BvC,IAAMwC,KAAQJ,EAAKG,GAAMD,KAAKJ,IAFhEC,EAGG,SAAIC,EAAaG,GAAjB,OAA8BvC,IAAMyC,IAAOL,EAAKG,GAAMD,KAAKJ,IAH9DC,EAIG,SAAIC,GAAJ,OAAoBpC,IAAM0C,OAAUN,GAAKE,KAAKJ,IA2CxCS,EAND,CACVC,WAnCe,CACfC,KAAM,SAACC,GAAD,OAA6B9C,IAAMqC,IAAiC,cAAe,CAAES,WAAUR,KAAKJ,IAC1Ga,QAAS,SAACC,GAAD,OAAgBb,EAAA,sBAAsCa,KAC/DC,OAAQ,SAACC,GAAD,OAAkCf,EAAoB,cAAee,IAC7EC,OAAQ,SAACD,GAAD,OAAkCf,EAAA,sBAAkCe,EAASF,IAAME,IAC3FR,OAAQ,SAACM,GAAD,OAAgBb,EAAA,sBAAkCa,KAC1DI,OAAQ,SAACJ,GAAD,OAAgBb,EAAA,sBAAmCa,EAAnC,WAAgD,MA8BxEK,QA3BY,CACZC,QAAS,kBAAMnB,EAAmB,aAClCoB,MAAO,SAACC,GAAD,OAA0BrB,EAAoB,iBAAkBqB,IACvEC,SAAU,SAACD,GAAD,OAA0BrB,EAAoB,oBAAqBqB,IAC7EE,QAAS,SAACC,GAAD,OAAyBxB,EAAA,uCAAoDwB,GAAe,KACrGC,aAAc,kBAAMzB,EAAoB,wBAAyB,MAuBjE0B,SApBa,CACbxB,IAAK,SAACyB,GAAD,OAAsB3B,EAAA,oBAAmC2B,KAC9DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjBhE,IAAMwC,KAAY,SAAUyB,EAAU,CACzCtD,QAAS,CAAE,eAAgB,0BAGnCyD,aAAc,SAACpB,GAAD,OAAgBb,EAAA,kBAAyBa,EAAzB,YAAuC,KACrEqB,YAAa,SAACrB,GAAD,OAAgBb,EAAA,kBAAwBa,KACrDsB,cAAe,SAACC,GAAD,OAA+BpC,EAAA,YAA0BoC,IACxEC,gBAAiB,SAACV,GAAD,OAAsB3B,EAAA,kBAAyB2B,GAAY,KAC5EW,eAAgB,SAACX,EAAkBY,GAAnB,OAAyCvC,EAAA,kBAAmC2B,EAAnC,sBAAyDY,KAClHC,eAAgB,SAACb,EAAkBY,GAAnB,OAAyCvC,EAAA,oBAA0C2B,EAA1C,iCAA2EY,OC1F3HE,EACT,WAAYC,GAA4B,oBACpCC,OAAOC,OAAOnF,KAAMiF,IAIfG,EAST,WAAY9B,GAAgC,yBAR5CF,QAAciC,EAQ6B,KAP3CC,MAAgB,GAO2B,KAN3CC,SAAmB,GAMwB,KAL3CC,YAAsB,GAKqB,KAJ3CC,KAAoB,KAIuB,KAH3CC,KAAe,GAG4B,KAF3CC,MAAgB,GAGRrC,IACAtD,KAAKoD,GAAKE,EAASF,GACnBpD,KAAKsF,MAAQhC,EAASgC,MACtBtF,KAAKuF,SAAWjC,EAASiC,SACzBvF,KAAKwF,YAAclC,EAASkC,YAC5BxF,KAAKyF,KAAOnC,EAASmC,KACrBzF,KAAK0F,KAAOpC,EAASoC,KACrB1F,KAAK2F,MAAQrC,EAASqC,Q,SC5BrBC,EACT,WAAYhC,GAAa,oBACrB5D,KAAKkE,SAAWN,EAAKM,SACrBlE,KAAK6F,YAAcjC,EAAKiC,YACxB7F,KAAK8F,MAAQlC,EAAKkC,OC8OXC,E,WA7OX,aAAe,IAAD,gCATdC,WAAa,IAAIC,IASH,KARdC,sBAAyCb,EAQ3B,KAPdc,UAAW,EAOG,KANdC,SAAU,EAMI,KALdC,gBAAiB,EAKH,KAJdtG,WAAgC,KAIlB,KAHduG,aAAe,IAAIrG,EAGL,KAFd6E,WAAY,IAAImB,KAAMM,IAAI,OAAO,GAEnB,KAadC,gBAAkB,SAACF,GACf,EAAKA,aAAeA,GAdV,KAiBdG,aAAe,SAAC3B,EAAmB4B,GAC/B,IAAMC,EAAiB,WACnB,EAAK7B,UAAU8B,SAAQ,SAACF,EAAO5E,GACf,cAARA,GAAqB,EAAKgD,UAAUhC,OAAOhB,OAGvD,OAAQgD,GACJ,IAAK,MACD6B,IACA,EAAK7B,UAAUyB,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDI,IACA,EAAK7B,UAAUyB,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDI,IACA,EAAK7B,UAAUyB,IAAI,UAAU,GAC7B,MACJ,IAAK,YACD,EAAKzB,UAAUhC,OAAO,aACtB,EAAKgC,UAAUyB,IAAI,YAAaG,KAtC9B,KAwEdG,kBAAoB,SAACC,GACjB,EAAKT,eAAiBS,GAzEZ,KA4ENC,YAAc,SAACzD,GACnB,IACU,EADJM,EAAO/C,EAAMoB,UAAU2B,KACzBA,IACAN,EAAS0D,QAAU1D,EAAS2D,UAAWC,MAAK,SAAAhG,GAAC,OAAIA,EAAEgD,WAAaN,EAAKM,YACrEZ,EAAS6D,OAAS7D,EAAS8D,eAAiBxD,EAAKM,SACjDZ,EAAS+D,KAAT,UAAgB/D,EAAS2D,iBAAzB,aAAgB,EAAoBK,MAAK,SAAAC,GAAC,OAAIA,EAAErD,WAAaZ,EAAS8D,iBAE1E9D,EAASmC,KAAO,IAAI+B,KAAKlE,EAASmC,MAClC,EAAKO,WAAWO,IAAIjD,EAASF,GAAIE,IApFvB,KAuFdmE,cAAgB,SAAC1H,GACb,EAAKA,WAAaA,GAxFR,KA2Fd2H,eA3Fc,sBA2FG,4BAAAxG,EAAA,6DACb,EAAKmF,gBAAiB,EADT,kBAGYtD,EAAMC,WAAWC,KAAK,EAAK0E,aAHvC,QAGHC,EAHG,QAIF9H,KAAK8G,SAAQ,SAAAtD,GAChB,EAAKyD,YAAYzD,MAErB,EAAKmE,cAAcG,EAAO7H,YAC1B,EAAK8G,mBAAkB,GARd,kDAUTgB,QAAQC,IAAR,MACA,EAAKjB,mBAAkB,GAXd,0DA3FH,KA0GNkB,YAAc,SAAC3E,GACnB,OAAO,EAAK4C,WAAWvD,IAAIW,IA3GjB,KA8Gd4E,aA9Gc,uCA8GC,WAAO5E,GAAP,eAAAlC,EAAA,2DACPoC,EAAW,EAAKyE,YAAY3E,IADrB,uBAGP,EAAK8C,iBAAmB5C,EAHjB,kBAIAA,GAJA,cAOP,EAAK+C,gBAAiB,EAPf,mBASctD,EAAMC,WAAWG,QAAQC,GATvC,eASHE,EATG,OAUH,EAAKyD,YAAYzD,GACjB2E,aAAY,WACR,EAAK/B,iBAAmB5C,KAE5B,EAAKuD,mBAAkB,GAdpB,kBAeIvD,GAfJ,kCAiBHuE,QAAQC,IAAR,MACA,EAAKjB,mBAAkB,GAlBpB,0DA9GD,2DAqIdqB,eArIc,uCAqIG,WAAO5E,GAAP,mBAAApC,EAAA,6DACP0C,EAAO/C,EAAMoB,UAAU2B,KACvBuE,EAAW,IAAIvC,EAAQhC,GAFhB,kBAIHb,EAAMC,WAAWK,OAAOC,GAJrB,QAKH8E,EAAc,IAAIpD,EAAS1B,IACrB8D,aAAexD,EAAMM,SACjCkE,EAAYnB,UAAY,CAACkB,GACzB,EAAKpB,YAAYqB,GACjBH,aAAY,WACR,EAAK/B,iBAAmBkC,KAVnB,kDAaTP,QAAQC,IAAR,MAbS,0DArIH,2DAsJdO,eAtJc,uCAsJG,WAAO/E,GAAP,SAAApC,EAAA,+EAEH6B,EAAMC,WAAWO,OAAOD,GAFrB,OAGT2E,aAAY,WACR,GAAI3E,EAASF,GAAI,CACb,IAAIkF,EAAe,2BAAQ,EAAKP,YAAYzE,EAASF,KAAQE,GAC7D,EAAK0C,WAAWO,IAAIjD,EAASF,GAAIkF,GACjC,EAAKpC,iBAAmBoC,MAPvB,+CAWTT,QAAQC,IAAR,MAXS,wDAtJH,2DAqKdS,eArKc,uCAqKG,WAAOnF,GAAP,SAAAlC,EAAA,6DACb,EAAKkF,SAAU,EADF,kBAGHrD,EAAMC,WAAWF,OAAOM,GAHrB,OAIT6E,aAAY,WACR,EAAKjC,WAAWlD,OAAOM,GACvB,EAAKgD,SAAU,KANV,gDAUTyB,QAAQC,IAAR,MACAG,aAAY,WACR,EAAK7B,SAAU,KAZV,yDArKH,2DAsLdoC,iBAtLc,sBAsLK,4BAAAtH,EAAA,6DACT0C,EAAO/C,EAAMoB,UAAU2B,KAC7B,EAAKwC,SAAU,EAFA,kBAILrD,EAAMC,WAAWQ,OAAO,EAAK0C,iBAAkB9C,IAJ1C,OAKX6E,aAAY,WAAO,IAAD,EACd,aAAI,EAAK/B,wBAAT,aAAI,EAAuBc,QAAS,CAAC,IAAD,EAChC,EAAKd,iBAAiBe,UAAtB,UAAkC,EAAKf,iBAAiBe,iBAAxD,aAAkC,EAAiCwB,QAAO,SAAAvH,GAAC,OACvEA,EAAEgD,YAAF,OAAeN,QAAf,IAAeA,OAAf,EAAeA,EAAMM,aACzB,EAAKgC,iBAAiBc,SAAU,MAC7B,CAAC,IAAD,IACGmB,EAAW,IAAIvC,EAAQhC,GAC7B,YAAKsC,wBAAL,mBAAuBe,iBAAvB,SAAkCrF,KAAKuG,GACvC,EAAKjC,iBAAkBc,SAAU,EAErC,EAAKhB,WAAWO,IAAI,EAAKL,iBAAkB9C,GAAI,EAAK8C,qBAf7C,gDAkBX2B,QAAQC,IAAR,MAlBW,yBAoBXG,aAAY,kBAAM,EAAK7B,SAAU,KApBtB,4EAtLL,KA8MdsC,qBA9Mc,sBA8MS,sBAAAxH,EAAA,6DACnB,EAAKkF,SAAU,EADI,kBAGTrD,EAAMC,WAAWQ,OAAO,EAAK0C,iBAAkB9C,IAHtC,OAIf6E,aAAY,WAAO,IAAD,EACd,EAAK/B,iBAAkByC,cAAc,UAAC,EAAKzC,wBAAN,aAAC,EAAuByC,aAC7D,EAAK3C,WAAWO,IAAI,EAAKL,iBAAkB9C,GAAI,EAAK8C,qBANzC,gDASf2B,QAAQC,IAAR,MATe,yBAWfG,aAAY,kBAAM,EAAK7B,SAAU,KAXlB,4EA9MT,KA6NdwC,sBAAwB,WACpB,EAAK1C,sBAAmBb,GA9Nd,KAiOdwD,wBAA0B,SAAC3E,GACvB,EAAK8B,WAAWY,SAAQ,SAAAtD,GACpBA,EAAS2D,UAAUL,SAAQ,SAAAuB,GACnBA,EAASjE,WAAaA,IACtBiE,EAASW,UAAYX,EAASY,iBAAmBZ,EAASY,iBAC1DZ,EAASW,WAAaX,EAASW,kBArO3CE,YAAmBhJ,MAEnBiJ,aACI,kBAAM,EAAKnE,UAAUoE,UACrB,WACI,EAAK5C,aAAe,IAAIrG,EACxB,EAAK+F,WAAWmD,QAChB,EAAKzB,oB,6CAmCjB,WACI,IAAMxE,EAAS,IAAIkG,gBAUnB,OATAlG,EAAOqB,OAAO,aAAcvE,KAAKsG,aAAapG,WAAWmJ,YACzDnG,EAAOqB,OAAO,WAAYvE,KAAKsG,aAAanG,SAASkJ,YACrDrJ,KAAK8E,UAAU8B,SAAQ,SAACF,EAAO5E,GACf,cAARA,EACAoB,EAAOqB,OAAOzC,EAAM4E,EAAe4C,eAEnCpG,EAAOqB,OAAOzC,EAAK4E,MAGpBxD,I,4BAGX,WACI,OAAOqG,MAAMC,KAAKxJ,KAAKgG,WAAWyD,UAAUC,MAAK,SAACxI,EAAGyI,GAAJ,OAC7CzI,EAAEuE,KAAMmE,UAAYD,EAAElE,KAAMmE,e,6BAGpC,WACI,OAAO1E,OAAO2E,QACV7J,KAAK8J,iBAAiBC,QAAO,SAAC/D,EAAY1C,GACtC,IAAMmC,EAAOuE,kBAAO1G,EAASmC,KAAO,eAEpC,OADAO,EAAWP,GAAQO,EAAWP,GAAX,sBAAuBO,EAAWP,IAAlC,CAAyCnC,IAAY,CAACA,GAClE0C,IACR,S,KClDAiE,EA5BX,aAAe,IAAD,gCAJd5I,MAA4B,KAId,KAHdT,MAAuBsJ,OAAOC,aAAaC,QAAQ,OAGrC,KAFdC,WAAY,EAEE,KAedlI,eAAiB,SAACd,GACd,EAAKA,MAAQA,GAhBH,KAmBdiJ,SAAW,SAAC1J,GACR,EAAKA,MAAQA,GApBH,KAuBd2J,aAAe,WACX,EAAKF,WAAY,GAvBjBrB,YAAmBhJ,MAEnBiJ,aACI,kBAAM,EAAKrI,SACX,SAAAA,GACQA,EACAsJ,OAAOC,aAAaK,QAAQ,MAAO5J,GAEnCsJ,OAAOC,aAAaM,WAAW,WCoHpCC,E,WAzHX,aAAe,IAAD,gCALd9G,KAAoB,KAKN,KAJd+G,cAA+B,KAIjB,KAHdC,WAAY,EAGE,KAFdC,yBAEc,OAQdlH,MARc,uCAQN,WAAOmH,GAAP,eAAA5J,EAAA,+EAEmB6B,EAAMU,QAAQE,MAAMmH,GAFvC,OAEMlH,EAFN,OAGA/C,EAAMC,YAAYwJ,SAAS1G,EAAKhD,OAChC,EAAKmK,uBAAuBnH,GAC5BqE,aAAY,kBACR,EAAKrE,KAAOA,KAEhBjC,GAAQC,KAAK,eACbf,EAAMmK,WAAWC,aATjB,uHARM,2DAuBd/I,OAAS,WACLrB,EAAMC,YAAYwJ,SAAS,MAC3BJ,OAAOC,aAAaM,WAAW,OAC/B,EAAK7G,KAAO,KACZjC,GAAQC,KAAK,MA3BH,KA8BdsJ,QA9Bc,sBA8BJ,4BAAAhK,EAAA,+EAEiB6B,EAAMU,QAAQC,UAF/B,OAEIE,EAFJ,OAGF/C,EAAMC,YAAYwJ,SAAS1G,EAAKhD,OAChCqH,aAAY,kBAAM,EAAKrE,KAAOA,KAC9B,EAAKmH,uBAAuBnH,GAL1B,gDAOFiE,QAAQC,IAAR,MAPE,yDA9BI,KAyCdjE,SAzCc,uCAyCH,WAAOiH,GAAP,eAAA5J,EAAA,+EAEgB6B,EAAMU,QAAQI,SAASiH,GAFvC,OAEGlH,EAFH,OAGH/C,EAAMC,YAAYwJ,SAAS1G,EAAKhD,OAChC,EAAKmK,uBAAuBnH,GAC5BqE,aAAY,kBACR,EAAKrE,KAAOA,KAEhBjC,GAAQC,KAAK,eACbf,EAAMmK,WAAWC,aATd,uHAzCG,2DAwDdE,SAAW,SAACrF,GACJ,EAAKlC,OAAM,EAAKA,KAAKkC,MAAQA,IAzDvB,KA4DdsF,eAAiB,SAACC,GACV,EAAKzH,OAAM,EAAKA,KAAKiC,YAAcwF,IA7D7B,KAgEdC,uBAhEc,sBAgEW,sBAAApK,EAAA,sDACrBgJ,OAAOqB,GAAGC,gBAAe,SAAAvK,GACG,cAApBA,EAASK,SACT,EAAKqJ,cAAgB1J,EAASwK,aAAa1H,gBAH9B,2CAhEX,KAwEd2H,cAAgB,WACZ,EAAKd,WAAY,EACjB,IAAMe,EAAW,SAAC5H,GACdhB,EAAMU,QAAQK,QAAQC,GAAarB,MAAK,SAAAkB,GACpC/C,EAAMC,YAAYwJ,SAAS1G,EAAKhD,OAChC,EAAKmK,uBAAuBnH,GAC5BqE,aAAY,WACR,EAAKrE,KAAOA,EACZ,EAAKgH,WAAY,KAErBjJ,GAAQC,KAAK,kBACdgK,OAAM,SAAAvK,GACLwG,QAAQC,IAAIzG,GACZ4G,aAAY,kBAAM,EAAK2C,WAAY,SAGvC,EAAKD,cACLgB,EAAS,EAAKhB,eAEdT,OAAOqB,GAAG5H,OAAM,SAAA1C,GACZ0K,EAAS1K,EAASwK,aAAa1H,eAChC,CAAE8H,MAAO,0BA7FN,KA4Gd7H,aA5Gc,sBA4GC,4BAAA9C,EAAA,6DACX,EAAK4K,wBADM,kBAGY/I,EAAMU,QAAQO,eAH1B,OAGDJ,EAHC,OAIPqE,aAAY,kBAAM,EAAKrE,KAAOA,KAC9B/C,EAAMC,YAAYwJ,SAAS1G,EAAKhD,OAChC,EAAKmK,uBAAuBnH,GANrB,kDAQPiE,QAAQC,IAAR,MARO,0DA3GXkB,YAAmBhJ,M,4CAGvB,WACI,QAASA,KAAK4D,O,oCA4FlB,SAA+BA,GAC3B,IAAMmI,EAAW5K,KAAKC,MAAM4K,KAAKpI,EAAKhD,MAAMqL,MAAM,KAAK,KAEjDC,EADU,IAAI1E,KAAoB,IAAfuE,EAASI,KACVvC,UAAYpC,KAAK4E,MAAS,IAClDpM,KAAK6K,oBAAsBwB,WAAWrM,KAAKgE,aAAckI,K,mCAG7D,WACII,aAAatM,KAAK6K,yB,KCzFX0B,EAfX,aAAe,IAAD,gCALdC,MAAe,CACXC,MAAM,EACN9J,KAAM,MAGI,KAId+J,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAM7J,KAAOgK,GANR,KASd1B,WAAa,WACT,EAAKuB,MAAMC,MAAO,EAClB,EAAKD,MAAM7J,KAAO,MAVlBqG,YAAmBhJ,OC8KZ4M,E,WA5KX,aAAe,IAAD,gCAVdjI,QAA0B,KAUZ,KATdkI,gBAAiB,EASH,KARdC,WAAY,EAQE,KAPd1G,SAAU,EAOI,KANd2G,WAAwB,GAMV,KALdC,mBAAoB,EAKN,KAJdC,UAAY,EAIE,KAHdC,eAAiC,GAGnB,KAFdC,mBAAoB,EAEN,KAgBdC,aAAe,SAACH,GACZ,EAAKA,UAAYA,GAjBP,KA2BdI,YA3Bc,uCA2BA,WAAOnJ,GAAP,eAAAhD,EAAA,6DACV,EAAK2L,gBAAiB,EADZ,kBAGgB9J,EAAMkB,SAASxB,IAAIyB,GAHnC,OAGAS,EAHA,OAINsD,aAAY,WACR,EAAKtD,QAAUA,EACf,EAAKkI,gBAAiB,KANpB,gDASNhF,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK4E,gBAAiB,KAVlC,yDA3BA,2DAyCd1I,YAzCc,uCAyCA,WAAOC,GAAP,iBAAAlD,EAAA,6DACV,EAAK4L,WAAY,EADP,kBAGiB/J,EAAMkB,SAASE,YAAYC,GAH5C,OAGAnD,EAHA,OAIAqM,EAAQrM,EAASnB,KACvBmI,aAAY,WACW,IAAD,EAAd,EAAKtD,UACL,YAAKA,QAAQ4I,cAAb,SAAqB3L,KAAK0L,GACtBA,EAAME,QAAU3M,EAAMoB,UAAU2B,OAChC/C,EAAMoB,UAAUkJ,SAASmC,EAAM9K,KAC/B,EAAKmC,QAAQmB,MAAQwH,EAAM9K,MAGnC,EAAKsK,WAAY,KAbf,gDAgBNjF,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK6E,WAAY,KAjB7B,yDAzCA,2DA8DdtI,aA9Dc,uCA8DC,WAAO8I,GAAP,SAAApM,EAAA,6DACX,EAAKkF,SAAU,EADJ,kBAGDrD,EAAMkB,SAASO,aAAa8I,EAAMlK,IAHjC,OAIPvC,EAAMoB,UAAUkJ,SAASmC,EAAM9K,KAC/ByF,aAAY,WACJ,EAAKtD,SAAW,EAAKA,QAAQ4I,SAC7B,EAAK5I,QAAQ4I,OAAOjG,MAAK,SAAAmG,GAAC,OAAIA,EAAED,UAASA,QAAS,EAClD,EAAK7I,QAAQ4I,OAAOjG,MAAK,SAAAmG,GAAC,OAAIA,EAAErK,KAAOkK,EAAMlK,MAAKoK,QAAS,EAC3D,EAAK7I,QAAQmB,MAAQwH,EAAM9K,IAC3B,EAAK4D,SAAU,MAVhB,gDAcPyB,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK7B,SAAU,KAf1B,yDA9DD,2DAiFd3B,YAjFc,uCAiFA,WAAO6I,GAAP,SAAApM,EAAA,6DACV,EAAKkF,SAAU,EADL,kBAGArD,EAAMkB,SAASQ,YAAY6I,EAAMlK,IAHjC,OAIN6E,aAAY,WACW,IAAD,EAAd,EAAKtD,UACL,EAAKA,QAAQ4I,OAAb,UAAsB,EAAK5I,QAAQ4I,cAAnC,aAAsB,EAAqB9E,QAAO,SAAAgF,GAAC,OAAIA,EAAErK,KAAOkK,EAAMlK,MACtE,EAAKgD,SAAU,MAPjB,gDAWNyB,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK7B,SAAU,KAZ3B,yDAjFA,2DAiGd1B,cAjGc,uCAiGE,WAAOC,GAAP,SAAAzD,EAAA,6DACZ,EAAKkF,SAAU,EADH,kBAGFrD,EAAMkB,SAASS,cAAcC,GAH3B,OAIRsD,aAAY,WAAO,IAAD,EACVtD,EAAQkB,aAAelB,EAAQkB,eAAR,UAAwBhF,EAAMoB,UAAU2B,YAAxC,aAAwB,EAAsBiC,cACrEhF,EAAMoB,UAAUmJ,eAAezG,EAAQkB,aAE3C,EAAKlB,QAAL,2BAAoB,EAAKA,SAAYA,GACrC,EAAKyB,SAAU,KATX,gDAYRyB,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK7B,SAAU,KAbzB,yDAjGF,2DAkHdxB,gBAlHc,uCAkHI,WAAOV,EAAkB4E,GAAzB,SAAA5H,EAAA,6DACd,EAAKkF,SAAU,EADD,kBAGJrD,EAAMkB,SAASW,gBAAgBV,GAH3B,OAIVrD,EAAM6M,cAAc7E,wBAAwB3E,GAC5C+D,aAAY,WAAO,IAAD,IACV,EAAKtD,SAAW,EAAKA,QAAQT,YAAb,UAA0BrD,EAAMoB,UAAU2B,YAA1C,aAA0B,EAAsBM,WAAY,EAAKS,QAAQT,WAAaA,IACtG4E,EAAY,EAAKnE,QAAQoE,iBAAmB,EAAKpE,QAAQoE,iBACzD,EAAKpE,QAAQmE,WAAa,EAAKnE,QAAQmE,WAEvC,EAAKnE,SAAW,EAAKA,QAAQT,YAAb,UAA0BrD,EAAMoB,UAAU2B,YAA1C,aAA0B,EAAsBM,YAChE4E,EAAY,EAAKnE,QAAQgJ,iBAAmB,EAAKhJ,QAAQgJ,kBAE7D,EAAKZ,WAAWnG,SAAQ,SAAAjC,GAChBA,EAAQT,WAAaA,IACrBS,EAAQmE,UAAYnE,EAAQoE,iBAAmBpE,EAAQoE,iBACvDpE,EAAQmE,WAAanE,EAAQmE,cAGrC,EAAK1C,SAAU,KAnBT,gDAsBVyB,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK7B,SAAU,KAvBvB,yDAlHJ,6DA6IdwH,eA7Ic,uCA6IG,WAAO9I,GAAP,eAAA5D,EAAA,6DACb,EAAK8L,mBAAoB,EADZ,kBAGgBjK,EAAMkB,SAASY,eAAe,EAAKF,QAAST,SAAUY,GAHtE,OAGHiI,EAHG,OAIT9E,aAAY,WACR,EAAK8E,WAAaA,EAClB,EAAKC,mBAAoB,KANpB,gDASTnF,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK+E,mBAAoB,KAVlC,yDA7IH,2DA2Jda,mBA3Jc,uCA2JO,WAAO3J,EAAkBY,GAAzB,eAAA5D,EAAA,6DACjB,EAAKiM,mBAAoB,EADR,kBAGYpK,EAAMkB,SAASc,eAAeb,EAAUY,GAHpD,OAGPkB,EAHO,OAIbiC,aAAY,WACR,EAAKiF,eAAiBlH,EACtB,EAAKmH,mBAAoB,KANhB,gDASbtF,QAAQC,IAAR,MACAG,aAAY,WACR,EAAKkF,mBAAoB,KAXhB,yDA3JP,wDACVnE,YAAmBhJ,MAEnBiJ,aACI,kBAAM,EAAKgE,aACX,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAMnI,EAA0B,IAAdmI,EAAkB,YAAc,YAClD,EAAKW,eAAe9I,QAEpB,EAAKiI,WAAa,M,+CAUlC,WACI,SAAIlM,EAAMoB,UAAU2B,OAAQ5D,KAAK2E,UACtB9D,EAAMoB,UAAU2B,KAAKM,WAAalE,KAAK2E,QAAQT,a,cCwBnD4J,EArDX,aAAe,IAAD,gCAHdC,SAA0B,GAGZ,KAFdC,cAAsC,KAExB,KAIdC,oBAAsB,SAACC,GACfrN,EAAM6M,cAAcxH,mBACpB,EAAK8H,eAAgB,IAAIG,KACpBC,QAAQ7N,oBAAkD2N,EAAY,CACnEG,mBAAoB,kCAAMxN,EAAMoB,UAAU2B,YAAtB,aAAM,EAAsBhD,SAEnD0N,yBACAC,iBAAiBC,IAASC,aAC1BC,QAEL,EAAKV,cAAcW,QAAQ/C,OAAM,SAAAvK,GAAK,OAAIwG,QAAQC,IAAI,sCAAuCzG,MAE7F,EAAK2M,cAAcY,GAAG,gBAAgB,SAACb,GACnC9F,aAAY,WACR8F,EAASnH,SAAQ,SAAAiI,GACbA,EAAQC,UAAY,IAAItH,KAAKqH,EAAQC,UAAY,QAErD,EAAKf,SAAWA,QAIxB,EAAKC,cAAcY,GAAG,kBAAkB,SAACC,GACrC5G,aAAY,WACR4G,EAAQC,UAAY,IAAItH,KAAKqH,EAAQC,WACrC,EAAKf,SAASgB,QAAQF,WA5BxB,KAkCdG,kBAAoB,WAAO,IAAD,EACtB,YAAKhB,qBAAL,SAAoBiB,OAAOrD,OAAM,SAAAvK,GAAK,OAAIwG,QAAQC,IAAI,8BAA+BzG,OAnC3E,KAsCd6N,cAAgB,WACZ,EAAKnB,SAAW,GAChB,EAAKiB,qBAxCK,KA2CdG,WA3Cc,uCA2CD,WAAO1F,GAAP,iBAAAvI,EAAA,6DACTuI,EAAOyE,WAAP,UAAoBrN,EAAM6M,cAAcxH,wBAAxC,aAAoB,EAAsC9C,GADjD,4BAGC,EAAK4K,qBAHN,aAGC,EAAoBoB,OAAO,cAAe3F,GAH3C,sDAKL5B,QAAQC,IAAR,MALK,wDA3CC,sDACVkB,YAAmBhJ,OCOda,EAAe,CACxB6M,cAAe,IAAI3H,EACnBjF,YAAa,IAAImJ,EACjBhI,UAAW,IAAIyI,EACfM,WAAY,IAAIuB,EAChB8C,aAAc,IAAIzC,EAClB0C,aAAc,IAAIxB,GAGTyB,EAAeC,wBAAc3O,GAEnC,SAAS4O,IACZ,OAAOC,qBAAWH,G,8GCcPI,oBAjCf,YAA2C,IAAD,EAAlBhL,EAAkB,EAAlBA,QACpB,EAAkE8K,IAAlE,IAAQJ,aAAgBzK,EAAxB,EAAwBA,gBAAiBwB,EAAzC,EAAyCA,QAEzC,OAAI,UAFJ,EAAoDnE,UAEtC2B,YAAV,eAAgBM,YAAaS,EAAQT,SAAiB,KAQtD,gBAAC0L,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACI,eAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAACC,MAAO,CAAEC,MAAO,QAAxC,SACI,eAACC,EAAA,EAAD,CACIC,OAAK,EACLC,MAAM,OACNzD,QAAShI,EAAQmE,UAAY,YAAc,oBAGnD,eAAC8G,GAAA,EAAOE,QAAR,CAAgBO,QAAM,EAACL,MAAO,CAAEC,MAAO,QAAvC,SACI,eAACC,EAAA,EAAD,CACIC,OAAK,EACLG,OAAK,EACLF,MAAOzL,EAAQmE,UAAY,MAAQ,QACnC6D,QAAShI,EAAQmE,UAAY,WAAa,SAC1C1C,QAASA,EACTmK,QAAS,SAACC,GAAD,OArBJ,SAACA,EAAmBtM,GACrCsM,EAAEC,iBACF9L,EAAQmE,UAAYlE,EAAgBV,GAAU,GAASU,EAAgBV,GAAU,GAmBrDwM,CAAaF,EAAG7L,EAAQT,qBCH7CyL,oBAvBf,YAA0C,IAAnBhL,EAAkB,EAAlBA,QAOnB,OACI,gBAACgM,EAAA,EAAD,CAAMC,GAAIC,IAAMC,GAAE,oBAAenM,EAAQT,UAAzC,UACI,eAAC6M,EAAA,EAAD,CAAOC,IAAKrM,EAAQmB,OAAS,qBAC7B,gBAAC6K,EAAA,EAAKb,QAAN,WACI,eAACa,EAAA,EAAKM,OAAN,UAActM,EAAQkB,cACtB,eAAC8K,EAAA,EAAKO,YAAN,UAXK,SAACC,GACd,GAAIA,EACA,OAAOA,EAAIC,OAAS,GAAKD,EAAIE,UAAU,EAAG,IAAM,MAAQF,EASjCG,CAAS3M,EAAQ4M,UAExC,gBAACZ,EAAA,EAAKb,QAAN,CAAc0B,OAAK,EAAnB,UACI,eAACC,EAAA,EAAD,CAAMpG,KAAK,SACV1G,EAAQoE,eAFb,gBAIA,eAAC,GAAD,CAAcpE,QAASA,UCgBpBgL,oBAjCf,YAAyD,IAArB1I,EAAoB,EAApBA,UAC1ByK,EAAS,CACXC,YAAa,aACbC,YAAa,GAGjB,OACI,eAACC,EAAA,EAAD,CAAMC,YAAU,EAAhB,SACK7K,EAAU8K,KAAI,SAAA5J,GAAQ,OACnB,eAAC6J,EAAA,EAAD,CACIC,WAAS,EAETC,QACI,eAACL,EAAA,EAAKM,KAAN,CAAmCvB,GAAIC,IAAMC,GAAE,oBAAe3I,EAASjE,UAAvE,SACI,eAAC6M,EAAA,EAAD,CACIqB,KAAK,OACLC,UAAQ,EACRrB,IAAK7I,EAASrC,OAAS,mBACvBwM,UAAQ,EACRtC,MAAO7H,EAASW,UAAY4I,EAAS,QAN7BvJ,EAASjE,UAJjC,SAeI,eAAC8N,EAAA,EAAMlC,QAAP,UACI,eAAC,GAAD,CAAanL,QAASwD,OAdrBA,EAASjE,kBC6CnBqO,OAzDf,YAAgD,IAAD,IAAnBjP,EAAmB,EAAnBA,SAExB,OACI,gBAACkP,EAAA,EAAQC,MAAT,WACI,gBAACD,EAAA,EAAD,WACKlP,EAASqF,aACN,eAAC+J,EAAA,EAAD,CAAOC,SAAS,MAAMvC,MAAM,MAAMzD,QAAQ,YAAYqD,MAAO,CAAE4C,UAAW,YAE9E,eAACT,EAAA,EAAKM,MAAN,UACI,gBAACN,EAAA,EAAD,WACI,eAACA,EAAA,EAAKpB,MAAN,CAAYf,MAAO,CAAE6C,aAAc,GAAKT,KAAK,OAAOC,UAAQ,EAACrB,KAAK,UAAA1N,EAAS+D,YAAT,eAAevB,QAAS,qBAC1F,gBAACqM,EAAA,EAAKrC,QAAN,WACI,eAACqC,EAAA,EAAKlB,OAAN,CAAaL,GAAIC,IAAMC,GAAE,sBAAiBxN,EAASF,IAAnD,SACKE,EAASgC,QAEd,gBAAC6M,EAAA,EAAKjB,YAAN,wBAA4B,eAAC,IAAD,CAAMJ,GAAE,oBAAexN,EAAS8D,cAAhC,mBAAiD9D,EAAS+D,YAA1D,aAAiD,EAAexB,iBAC3FvC,EAAS6D,QACN,eAACgL,EAAA,EAAKjB,YAAN,UACI,eAACwB,EAAA,EAAD,CAAOpC,OAAK,EAACF,MAAM,SAAnB,6CAKP9M,EAAS0D,UAAY1D,EAAS6D,QAC3B,eAACgL,EAAA,EAAKjB,YAAN,UACI,eAACwB,EAAA,EAAD,CAAOpC,OAAK,EAACF,MAAM,QAAnB,yDASxB,eAACoC,EAAA,EAAD,UACI,kCACI,eAACf,EAAA,EAAD,CAAMpG,KAAK,UAAWrB,kBAAO1G,EAASmC,KAAO,uBAC7C,eAACgM,EAAA,EAAD,CAAMpG,KAAK,WAAY/H,EAASqC,WAGxC,eAAC6M,EAAA,EAAD,CAASM,WAAS,EAAlB,SACI,eAAC,GAAD,CAA0B7L,UAAW3D,EAAS2D,cAElD,gBAACuL,EAAA,EAAD,CAASO,UAAQ,EAAjB,UACI,gCAAOzP,EAASkC,cAChB,eAAC0K,EAAA,EAAD,CACIU,GAAIC,IACJC,GAAE,sBAAiBxN,EAASF,IAC5BgN,MAAM,OACN4C,QAAQ,QACRrG,QAAQ,gBChCbgD,oBAtBf,WAEI,IACQsD,EADkBxD,IAAlB/B,cACAuF,kBAGR,OACI,eAAC,WAAD,UACKA,EAAkBlB,KAAI,mCAAEmB,EAAF,KAASlN,EAAT,YACnB,gBAAC,WAAD,WACI,eAACiL,EAAA,EAAD,CAAQkC,KAAG,EAAC/C,MAAM,OAAlB,SACK8C,IAEJlN,EAAW+L,KAAI,SAAAzO,GAAQ,OACpB,eAAC,GAAD,CAAoCA,SAAUA,GAAvBA,EAASF,SALzB8P,W,oBCuBhBvD,oBAhCf,WACI,MAAuDF,IAA/C/B,cAAiB5I,EAAzB,EAAyBA,UAAW2B,EAApC,EAAoCA,aAEpC,OACI,gBAAC,WAAD,WACI,gBAAC2M,GAAA,EAAD,CAAMC,UAAQ,EAACjB,KAAK,QAAQpC,MAAO,CAAEC,MAAO,OAAQqD,UAAW,IAA/D,UACI,eAACrC,EAAA,EAAD,CAAQsC,KAAK,SAASZ,UAAQ,EAACvC,MAAM,OAAOzD,QAAQ,YACpD,eAACyG,GAAA,EAAKjB,KAAN,CACIxF,QAAQ,iBACR6G,OAAQ1O,EAAU2O,IAAI,OACtBlD,QAAS,kBAAM9J,EAAa,MAAO,WAEvC,eAAC2M,GAAA,EAAKjB,KAAN,CACIxF,QAAQ,YACR6G,OAAQ1O,EAAU2O,IAAI,WACtBlD,QAAS,kBAAM9J,EAAa,UAAW,WAE3C,eAAC2M,GAAA,EAAKjB,KAAN,CACIxF,QAAQ,cACR6G,OAAQ1O,EAAU2O,IAAI,UACtBlD,QAAS,kBAAM9J,EAAa,SAAU,cAG9C,eAACwK,EAAA,EAAD,IACA,eAAC,KAAD,CACIyC,SAAU,SAACjO,GAAD,OAAgBgB,EAAa,YAAahB,IACpDiB,MAAO5B,EAAUrC,IAAI,cAAgB,IAAI+E,a,UCG1CmM,OAhCf,WACI,OACI,eAAC,WAAD,UACI,eAACC,GAAA,EAAD,CAAazD,OAAK,EAACH,MAAO,CAAEsD,UAAW,IAAvC,SACI,gBAACd,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,CAASxC,MAAO,CAAE6D,UAAW,KAA7B,SACI,gBAACD,GAAA,EAAD,WACI,gBAACA,GAAA,EAAY3C,OAAb,CAAoBnL,OAAK,EAAzB,UACI,eAAC8N,GAAA,EAAYE,KAAb,IACA,eAACF,GAAA,EAAYE,KAAb,OAEJ,eAACF,GAAA,EAAYG,UAAb,UACI,eAACH,GAAA,EAAYE,KAAb,WAIZ,eAACtB,EAAA,EAAD,UACI,gBAACoB,GAAA,EAAD,WACI,eAACA,GAAA,EAAYE,KAAb,IACA,eAACF,GAAA,EAAYE,KAAb,SAGR,eAACtB,EAAA,EAAD,CAASM,WAAS,EAAC9C,MAAO,CAAE6D,UAAW,MACvC,eAACrB,EAAA,EAAD,CAASO,UAAQ,EAAjB,SACI,eAAC7C,EAAA,EAAD,CAAQ8D,UAAQ,EAAC5D,MAAM,OAAO4C,QAAQ,QAAQrG,QAAQ,mB,qBC4B/DgD,oBA7Cf,WAEI,IAAQjC,EAAkB+B,IAAlB/B,cACAhG,EAA4DgG,EAA5DhG,eAAgB1B,EAA4C0H,EAA5C1H,WAAYQ,EAAgCkH,EAAhClH,gBAAiBzG,EAAe2N,EAAf3N,WACrD,EAAsCkU,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAYA,OAJAC,qBAAU,WACFpO,EAAWoM,MAAQ,GAAG1K,MAC3B,CAAC1B,EAAWoM,KAAM1K,IAGjB,gBAAC2M,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAarE,MAAM,KAAnB,SACKvC,EAAcrH,iBAAmB6N,EAC9B,gBAAC,WAAD,WACI,eAAC,GAAD,IACA,eAAC,GAAD,OAGJ,eAAC,KAAD,CACIK,UAAW,EACXC,SArBE,WAClBL,GAAe,GACf3N,EAAgB,IAAIvG,EAAaF,EAAY0U,YAAc,IAC3D/M,IAAiBhF,MAAK,kBAAMyR,GAAe,OAmB3BO,SAAUR,KAAiBnU,GAAcA,EAAW0U,YAAc1U,EAAW4U,WAC7EC,aAAa,EAJjB,SAMI,eAAC,GAAD,QAIZ,eAACP,EAAA,EAAKC,OAAN,CAAarE,MAAM,IAAnB,SACI,eAAC,GAAD,MAEJ,eAACoE,EAAA,EAAKC,OAAN,CAAarE,MAAO,GAApB,SACI,eAAC4E,EAAA,EAAD,CAAQrB,OAAQU,Y,oBCdjBvE,oBA9Bf,WACI,IAAQ1N,EAAcwN,IAAdxN,UACA2B,EAAiB3B,EAAjB2B,KAAM1B,EAAWD,EAAXC,OAEd,OACI,eAACkR,GAAA,EAAD,CAAM0B,UAAQ,EAACC,MAAM,MAArB,SACI,gBAACC,GAAA,EAAD,WACI,gBAAC5B,GAAA,EAAKjB,KAAN,CAAWvB,GAAIqE,IAASnE,GAAG,IAAIoE,OAAK,EAACC,QAAM,EAA3C,UACI,sBAAKnE,IAAI,mBAAmBoE,IAAI,OAAOpF,MAAO,CAAEqF,YAAa,UADjE,kBAIA,eAACjC,GAAA,EAAKjB,KAAN,CAAWvB,GAAIqE,IAASnE,GAAG,cAAczF,KAAK,eAC9C,eAAC+H,GAAA,EAAKjB,KAAN,CAAWvB,GAAIqE,IAASnE,GAAG,UAAUzF,KAAK,WAC1C,eAAC+H,GAAA,EAAKjB,KAAN,UACI,eAACjC,EAAA,EAAD,CAAQU,GAAIqE,IAASnE,GAAG,kBAAkBwE,UAAQ,EAAC3I,QAAQ,sBAE/D,gBAACyG,GAAA,EAAKjB,KAAN,CAAWoD,SAAS,QAApB,UACI,eAACxE,EAAA,EAAD,CAAOC,KAAS,OAAJpN,QAAI,IAAJA,OAAA,EAAAA,EAAMkC,QAAS,mBAAoB0P,QAAM,EAACC,OAAO,UAC7D,eAACC,GAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAEhS,QAAF,IAAEA,OAAF,EAAEA,EAAMiC,YAA1C,SACI,gBAAC6P,GAAA,EAAStC,KAAV,WACI,eAACsC,GAAA,EAASvD,KAAV,CAAevB,GAAIC,IAAMC,GAAE,2BAAelN,QAAf,IAAeA,OAAf,EAAeA,EAAMM,UAAY0R,KAAK,aAAarC,KAAK,SACnF,eAACmC,GAAA,EAASvD,KAAV,CAAe5B,QAASrO,EAAQ0T,KAAK,SAASrC,KAAK,0B,oCCThEsC,OAVf,YAAiE,IAA9BC,EAA6B,EAAxCC,UAAyBC,EAAe,mBACvCC,EAAiBxG,IAA9BxN,UAAagU,WACrB,OACI,eAAC,KAAD,2BACQD,GADR,IAEIE,OAAQ,SAACC,GAAD,OAAWF,EAAa,eAACH,EAAD,eAAeK,IAAY,eAAC,KAAD,CAAUrF,GAAG,WCUrEnB,oBAlBf,WAAwB,IAAD,IAEX7O,EAAgB2O,IAAhB3O,YAER,OACI,gBAACkU,GAAA,EAAD,WACI,eAAC/D,EAAA,EAAD,CAAQL,GAAG,KAAKjE,QAAQ,iBACxB,eAACsE,EAAA,EAAD,CAAQkC,KAAG,EAACvC,GAAG,KAAKR,MAAM,MAAMzD,QAAO,UAAE7L,EAAYO,aAAd,aAAE,EAAmB+U,WAC3D,UAAAtV,EAAYO,aAAZ,eAAmB8B,UAChB,gBAACqP,EAAA,EAAD,WACI,eAACvB,EAAA,EAAD,CAAQL,GAAG,KAAKjE,QAAQ,cAAcyD,MAAM,SAC5C,uBAAMJ,MAAO,CAAEsD,UAAW,QAA1B,SAAqCxS,EAAYO,MAAM8B,mBCI5DkT,OAhBf,WACI,OACI,gBAAC7D,EAAA,EAAD,CAAS8D,aAAW,EAApB,UACI,gBAACrF,EAAA,EAAD,CAAQsC,MAAI,EAAZ,UACI,eAAC9B,EAAA,EAAD,CAAMpG,KAAK,WADf,yDAIA,eAACmH,EAAA,EAAQ+D,OAAT,UACI,eAACrG,EAAA,EAAD,CAAQU,GAAIC,IAAMC,GAAG,cAAc0F,SAAO,EAA1C,6C,6BCaDC,OAdf,SAAqBN,GACjB,MAAsBO,aAASP,EAAM9K,MAArC,mBAAOsL,EAAP,KAAcC,EAAd,KAEA,OACI,gBAACC,GAAA,EAAKC,MAAN,CAAYzV,MAAOuV,EAAKG,WAAaH,EAAKvV,MAA1C,UACI,iCAAQ8U,EAAMa,QACd,kDAAWL,GAAWR,IACrBS,EAAKG,SAAWH,EAAKvV,MAClB,eAACqR,EAAA,EAAD,CAAOpC,OAAK,EAACF,MAAM,MAAnB,SAA0BwG,EAAKvV,QAC/B,SCYDsO,oBAzBf,WACI,IAAQ1N,EAAcwN,IAAdxN,UAER,OACI,eAAC,KAAD,CACIgV,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAI9V,MAAO,MACjD+V,SAAU,SAAC3N,EAAD,OAAW4N,EAAX,EAAWA,UAAX,OAA2BpV,EAAU0B,MAAM8F,GAAQmC,OAAM,SAAAvK,GAAK,OACpEgW,EAAU,CAAEhW,MAAO,kCAH3B,SAKK,gBAAGiW,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAc9V,EAA/B,EAA+BA,OAA/B,OACG,gBAAC,KAAD,CAAM+V,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,eAACxG,EAAA,EAAD,CAAQL,GAAG,KAAKjE,QAAQ,wBAAwByD,MAAM,OAAOwC,UAAU,WACvE,eAAC,GAAD,CAAavH,KAAK,QAAQiL,YAAY,UACtC,eAAC,GAAD,CAAajL,KAAK,WAAWiL,YAAY,WAAWoB,KAAK,aACzD,eAAC,KAAD,CACIrM,KAAK,QAAQ6K,OAAQ,kBACjB,eAACxD,EAAA,EAAD,CAAO1C,MAAO,CAAE6C,aAAc,IAAMvC,OAAK,EAACF,MAAM,MAAMzD,QAASlL,EAAOJ,WAE9E,eAAC6O,EAAA,EAAD,CAAQ9J,QAASmR,EAAcjC,UAAQ,EAAC3I,QAAQ,QAAQ+K,KAAK,SAASvH,OAAK,a,mBCFhFwH,OAhBf,YAA8C,IAAlBlW,EAAiB,EAAjBA,OACxB,OACI,eAACmW,GAAA,EAAD,CAASvW,OAAK,EAAd,SACKI,GACG,eAACmW,GAAA,EAAQ/F,KAAT,UACKpQ,EAAOsQ,KAAI,SAAC8F,EAAUC,GAAX,OACR,eAACF,GAAA,EAAQzF,KAAT,UACK0F,GADcC,WCoC5BnI,oBAxCf,WACI,IAAQ1N,EAAcwN,IAAdxN,UAER,OACI,eAAC,KAAD,CACIgV,cAAe,CAAEpR,YAAa,GAAI3B,SAAU,GAAIgT,MAAO,GAAIC,SAAU,GAAI9V,MAAO,MAChF+V,SAAU,SAAC3N,EAAD,OAAW4N,EAAX,EAAWA,UAAX,OAA2BpV,EAAU4B,SAAS4F,GAAQmC,OAAM,SAAAvK,GAAK,OACvEgW,EAAU,CAAEhW,cAChB0W,iBAAkBC,KAAW,CACzBnS,YAAamS,OAAaC,WAC1B/T,SAAU8T,OAAaC,WACvBf,MAAOc,OAAaC,WAAWf,QAC/BC,SAAUa,OAAaC,aAR/B,SAWK,gBAAGX,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAc9V,EAA/B,EAA+BA,OAAQyW,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,MAAhD,OACG,gBAAC,KAAD,CAAMX,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UACI,eAACxG,EAAA,EAAD,CAAQL,GAAG,KAAKjE,QAAQ,0BAA0ByD,MAAM,OAAOwC,UAAU,WACzE,eAAC,GAAD,CAAavH,KAAK,cAAciL,YAAY,iBAC5C,eAAC,GAAD,CAAajL,KAAK,WAAWiL,YAAY,aACzC,eAAC,GAAD,CAAajL,KAAK,QAAQiL,YAAY,UACtC,eAAC,GAAD,CAAajL,KAAK,WAAWiL,YAAY,WAAWoB,KAAK,aACzD,eAAC,KAAD,CACIrM,KAAK,QAAQ6K,OAAQ,kBACjB,eAAC,GAAD,CAAkBzU,OAAQA,EAAOJ,WAEzC,eAAC6O,EAAA,EAAD,CACI8D,UAAWkE,IAAYC,GAASZ,EAChCnR,QAASmR,EACTjC,UAAQ,EACR3I,QAAQ,WACR+K,KAAK,SACLvH,OAAK,aCSdR,oBAzCf,WACI,MAAkCF,IAA1BxN,EAAR,EAAQA,UAAW+I,EAAnB,EAAmBA,WAEnB,OACI,eAACwH,EAAA,EAAD,CAASsC,UAAQ,EAAClC,UAAU,SAASS,UAAQ,EAACmE,UAAU,WAAxD,SACI,gBAACxC,GAAA,EAAD,CAAWY,MAAI,EAAf,UACI,gBAAC3E,EAAA,EAAD,CAAQL,GAAG,KAAKkE,UAAQ,EAAxB,UACI,eAAC/D,EAAA,EAAD,CAAOqB,KAAK,UAAUpB,IAAI,mBAAmBoE,IAAI,OAAOpF,MAAO,CAAE6C,aAAc,MADnF,kBAIC5Q,EAAUgU,WACP,gBAAC,WAAD,WACI,eAAChF,EAAA,EAAD,CAAQL,GAAG,KAAKkE,UAAQ,EAACnI,QAAQ,4BACjC,eAACuD,EAAA,EAAD,CAAQU,GAAIC,IAAMC,GAAG,cAAcsB,KAAK,OAAO0C,UAAQ,EAAvD,kCAKJ,gBAAC,WAAD,WACI,eAAC5E,EAAA,EAAD,CAAQK,QAAS,kBAAMvF,EAAW0B,UAAU,eAAC,GAAD,MAAgB0F,KAAK,OAAO0C,UAAQ,EAAhF,oBAGA,eAAC5E,EAAA,EAAD,CAAQK,QAAS,kBAAMvF,EAAW0B,UAAU,eAAC,GAAD,MAAmB0F,KAAK,OAAO0C,UAAQ,EAAnF,uBAGA,eAACsD,GAAA,EAAD,CAAStG,YAAU,EAACgD,UAAQ,EAA5B,gBACA,eAAC5E,EAAA,EAAD,CACI9J,QAASnE,EAAU2I,UACnBwH,KAAK,OACL0C,UAAQ,EACR1E,MAAM,WACNzD,QAAQ,sBACR4D,QAAStO,EAAUyJ,2B,UCzBhC2M,OARf,YAAgF,IAAD,IAAlDvD,gBAAkD,aAAjCnI,eAAiC,MAAvB,aAAuB,EAC3E,OACI,eAAC2L,GAAA,EAAD,CAAQ9E,QAAQ,EAAMsB,SAAUA,EAAhC,SACI,eAACD,EAAA,EAAD,CAAQlI,QAASA,O,UCcd4L,OAdf,SAAoBpC,GAChB,MAAsBO,aAASP,EAAM9K,MAArC,mBAAOsL,EAAP,KAAcC,EAAd,KAEA,OACI,gBAACC,GAAA,EAAKC,MAAN,CAAYzV,MAAOuV,EAAKG,WAAaH,EAAKvV,MAA1C,UACI,iCAAQ8U,EAAMa,QACd,qDAAcL,GAAWR,IACxBS,EAAKG,SAAWH,EAAKvV,MAClB,eAACqR,EAAA,EAAD,CAAOpC,OAAK,EAACF,MAAM,MAAnB,SAA0BwG,EAAKvV,QAC/B,S,UCYDmX,OArBf,SAAuBrC,GACnB,MAA+BO,aAASP,EAAM9K,MAA9C,mBAAOsL,EAAP,KAAcC,EAAd,KAAoB6B,EAApB,KAEA,OACI,gBAAC5B,GAAA,EAAKC,MAAN,CAAYzV,MAAOuV,EAAKG,WAAaH,EAAKvV,MAA1C,UACI,iCAAQ8U,EAAMa,QACd,eAAC0B,GAAA,EAAD,CACIC,WAAS,EACTC,QAASzC,EAAMyC,QACflS,MAAOiQ,EAAMjQ,OAAS,KACtBgN,SAAU,SAAClD,EAAGqI,GAAJ,OAAUJ,EAAQK,SAASD,EAAEnS,QACvCqS,OAAQ,kBAAMN,EAAQO,YAAW,IACjC1C,YAAaH,EAAMG,cAEtBM,EAAKG,SAAWH,EAAKvV,MAClB,eAACqR,EAAA,EAAD,CAAOpC,OAAK,EAACF,MAAM,MAAnB,SAA0BwG,EAAKvV,QAC/B,SC1BH4X,GAAkB,CAC3B,CAAErD,KAAM,SAAUlP,MAAO,UACzB,CAAEkP,KAAM,UAAWlP,MAAO,WAC1B,CAAEkP,KAAM,OAAQlP,MAAO,QACvB,CAAEkP,KAAM,OAAQlP,MAAO,QACvB,CAAEkP,KAAM,QAASlP,MAAO,SACxB,CAAEkP,KAAM,SAAUlP,MAAO,W,qBCgBdwS,OAlBf,SAAqB/C,GACjB,MAA+BO,aAASP,EAAM9K,MAA9C,mBAAOsL,EAAP,KAAcC,EAAd,KAAoB6B,EAApB,KAEA,OACI,gBAAC5B,GAAA,EAAKC,MAAN,CAAYzV,MAAOuV,EAAKG,WAAaH,EAAKvV,MAA1C,UACI,eAAC,KAAD,uCACQsV,GACAR,GAFR,IAGIgD,SAAWxC,EAAMjQ,OAAS,IAAIc,KAAKmP,EAAMjQ,QAAW,KACpDgN,SAAU,SAAAhN,GAAK,OAAI+R,EAAQK,SAASpS,OAEvCkQ,EAAKG,SAAWH,EAAKvV,MAClB,eAACqR,EAAA,EAAD,CAAOpC,OAAK,EAACF,MAAM,MAAnB,SAA0BwG,EAAKvV,QAC/B,SCwEDsO,oBAzEf,WAEI,IAAMhO,EAAUyX,eACR1L,EAAkB+B,IAAlB/B,cACAxF,EAAiEwF,EAAjExF,eAAgBG,EAAiDqF,EAAjDrF,eAAgBL,EAAiC0F,EAAjC1F,aAAc3B,EAAmBqH,EAAnBrH,eAC9CjD,EAAOiW,eAAPjW,GAER,EAAgC6Q,mBAA6B,IAAI7O,GAAjE,mBAAO9B,EAAP,KAAiByD,EAAjB,KAEMgR,EAAmBC,KAAW,CAChC1S,MAAO0S,OAAaC,SAAS,kCAC7BzS,YAAawS,OAAaC,SAAS,wCACnC1S,SAAUyS,OAAaC,WACvBxS,KAAMuS,OAAaC,SAAS,oBAAoBqB,WAChD5T,KAAMsS,OAAaC,WACnBtS,MAAOqS,OAAaC,aAoBxB,OAjBA7D,qBAAU,WACFhR,GAAI4E,EAAa5E,GAAIV,MAAK,SAAAY,GAAQ,OAAIyD,EAAY,IAAI3B,EAAmB9B,SAC9E,CAACF,EAAI4E,IAeJ3B,EAAuB,eAAC,GAAD,CAAmBsG,QAAQ,wBAGlD,gBAAC6F,EAAA,EAAD,CAASO,UAAQ,EAAjB,UACI,eAAC9B,EAAA,EAAD,CAAQtE,QAAQ,mBAAmBwG,KAAG,EAAC/C,MAAM,SAC7C,eAAC,KAAD,CACI2H,iBAAkBA,EAClBwB,oBAAkB,EAClBtC,cAAe3T,EACf8T,SAAU,SAAA3N,GAAM,OAtB5B,SAA0BnG,GACtB,GAAKA,EAASF,GAQViF,EAAe/E,GAAUZ,MAAK,kBAAMf,EAAQC,KAAR,sBAA4B0B,EAASF,YAR3D,CACd,IAAIgF,EAAW,2BACR9E,GADQ,IAEXF,GAAIoW,iBAERtR,EAAeE,GAAa1F,MAAK,kBAAMf,EAAQC,KAAR,sBAA4BwG,EAAYhF,SAgBvDqW,CAAiBhQ,IAJzC,SAKK,gBAAG6N,EAAH,EAAGA,aAAcY,EAAjB,EAAiBA,QAASX,EAA1B,EAA0BA,aAAcY,EAAxC,EAAwCA,MAAxC,OACG,gBAAC,KAAD,CAAMX,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UAKI,eAAC,GAAD,CAAapM,KAAK,QAAQiL,YAAY,UACtC,eAAC,GAAD,CAAYoD,KAAM,EAAGpD,YAAY,cAAcjL,KAAK,gBACpD,eAAC,GAAD,CAAeuN,QAASK,GAAiB3C,YAAY,WAAWjL,KAAK,aACrE,eAAC,GAAD,CACIsO,gBAAgB,OAChBtO,KAAK,OACLuO,gBAAc,EACdC,YAAY,OACZC,WAAW,yBAEf,eAAC7I,EAAA,EAAD,CAAQtE,QAAQ,mBAAmBwG,KAAG,EAAC/C,MAAM,SAC7C,eAAC,GAAD,CAAakG,YAAY,OAAOjL,KAAK,SACrC,eAAC,GAAD,CAAaiL,YAAY,QAAQjL,KAAK,UACtC,eAAC6E,EAAA,EAAD,CAAQ8D,SAAUuD,IAAiBY,IAAUD,EAAS9R,QAASmR,EAAcvE,QAAQ,QAAQsC,UAAQ,EAACoC,KAAK,SAAS/K,QAAQ,WAC5H,eAACuD,EAAA,EAAD,CAAQU,GAAIC,IAAMC,GAAG,cAAckC,QAAQ,QAAQ0E,KAAK,SAAS/K,QAAQ,uBCzE3FoN,GAAqB,CACvBtR,OAAQ,mBAGNuR,GAAyB,CAC3BzE,SAAU,WACV0E,OAAQ,KACRC,KAAM,KACNjK,MAAO,OACPkK,OAAQ,OACR/J,MAAO,SAkEIT,oBA3Df,YAAsD,IAAD,IAAnBrM,EAAmB,EAAnBA,SAC9B,EAA+EmM,IAAvE/B,cAAiBlF,EAAzB,EAAyBA,iBAAkBpC,EAA3C,EAA2CA,QAASsC,EAApD,EAAoDA,qBAEpD,OACI,gBAAC8J,EAAA,EAAQC,MAAT,WACI,gBAACD,EAAA,EAAD,CAASlC,OAAK,EAACqC,SAAS,MAAM3C,MAAO,CAAEoK,QAAS,KAAhD,UACI,eAACrJ,EAAA,EAAD,CAAOC,IAAG,iCAA4B1N,EAASiC,SAArC,QAAqD4K,OAAK,EAACH,MAAO+J,KAC3EzW,EAASqF,aACN,eAAC+J,EAAA,EAAD,CAAO1C,MAAO,CAAEuF,SAAU,WAAY8E,OAAQ,IAAMH,MAAO,GAAII,IAAK,IAAMC,QAAM,EAACnK,MAAM,MAAMzD,QAAQ,cAEzG,eAAC6F,EAAA,EAAD,CAASxC,MAAOgK,GAAwB1J,OAAK,EAA7C,SACI,eAAC6B,EAAA,EAAKM,MAAN,UACI,eAACN,EAAA,EAAD,UACI,gBAACA,EAAA,EAAKrC,QAAN,WACI,eAACmB,EAAA,EAAD,CACImB,KAAK,OACLzF,QAASrJ,EAASgC,MAClB0K,MAAO,CAAEI,MAAO,WAEpB,6BAAIpG,kBAAO1G,EAASmC,KAAO,iBAC3B,4CAAa,kCAAQ,eAAC,IAAD,CAAMqL,GAAE,8BAAexN,EAAS+D,YAAxB,aAAe,EAAenD,UAAtC,mBAAmDZ,EAAS+D,YAA5D,aAAmD,EAAexB,+BAM3G,eAAC2M,EAAA,EAAD,CAASO,UAAQ,EAACJ,SAAS,SAA3B,SACKrP,EAAS6D,OACN,gBAAC,WAAD,WACI,eAAC+I,EAAA,EAAD,CACIE,MAAO9M,EAASqF,YAAc,QAAU,MACxCqK,QAAQ,OACR1C,OAAK,EACL3D,QAASrJ,EAASqF,YAAc,wBAA0B,kBAC1D4H,QAAS7H,EACTtC,QAASA,IACb,eAAC8J,EAAA,EAAD,CACI8D,SAAU1Q,EAASqF,YACnBiI,GAAIC,IAAMC,GAAE,kBAAaxN,EAASF,IAClCgN,MAAM,SACN4C,QAAQ,QAJZ,6BAQJ1P,EAAS0D,QACT,eAACkJ,EAAA,EAAD,CAAQ9J,QAASA,EAASmK,QAAS/H,EAAnC,+BACA,eAAC0H,EAAA,EAAD,CACI8D,SAAU1Q,EAASqF,YACnBvC,QAASA,EACTmK,QAAS/H,EACT4H,MAAM,OAJV,mCCzBLT,oBArCf,YAAoD,IAApBrM,EAAmB,EAAnBA,SAC5B,OACI,gBAACkP,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,CAASG,SAAS,MAAlB,SACI,gBAAC0B,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAarE,MAAO,EAApB,SACI,eAACwB,EAAA,EAAD,CAAMpG,KAAK,OAAO+G,KAAK,QAAQhC,MAAM,WAEzC,eAACiE,EAAA,EAAKC,OAAN,CAAarE,MAAO,GAApB,SACI,6BAAI3M,EAASkC,qBAIzB,eAACgN,EAAA,EAAD,CAASG,UAAQ,EAAjB,SACI,gBAAC0B,EAAA,EAAD,CAAMmG,cAAc,SAApB,UACI,eAACnG,EAAA,EAAKC,OAAN,CAAarE,MAAO,EAApB,SACI,eAACwB,EAAA,EAAD,CAAMpG,KAAK,WAAW+G,KAAK,QAAQhC,MAAM,WAE7C,eAACiE,EAAA,EAAKC,OAAN,CAAarE,MAAO,GAApB,SACI,gCAAOjG,kBAAO1G,EAASmC,KAAO,gCAI1C,eAAC+M,EAAA,EAAD,CAASG,UAAQ,EAAjB,SACI,gBAAC0B,EAAA,EAAD,CAAMmG,cAAc,SAApB,UACI,eAACnG,EAAA,EAAKC,OAAN,CAAarE,MAAO,EAApB,SACI,eAACwB,EAAA,EAAD,CAAMpG,KAAK,SAAS+G,KAAK,QAAQhC,MAAM,WAE3C,eAACiE,EAAA,EAAKC,OAAN,CAAarE,MAAO,GAApB,SACI,kCAAO3M,EAASqC,MAAhB,KAAyBrC,EAASoC,qB,oBCkE3CiK,oBA3Ff,YAAsD,IAAtBzB,EAAqB,EAArBA,WACpBoB,EAAiBG,IAAjBH,aAWR,OATA8E,qBAAU,WAIN,OAHIlG,GACAoB,EAAarB,oBAAoBC,GAE9B,WACHoB,EAAaJ,mBAElB,CAACI,EAAcpB,IAGd,gBAAC,WAAD,WACI,eAACsE,EAAA,EAAD,CACII,UAAU,SACVD,SAAS,MACTmC,UAAQ,EACR1E,MAAM,OACNJ,MAAO,CAAEyK,OAAQ,QALrB,SAOI,eAACxJ,EAAA,EAAD,sCAEJ,gBAACuB,EAAA,EAAD,CAASG,UAAQ,EAACI,UAAQ,EAA1B,UACI,eAAC,KAAD,CACIqE,SAAU,SAAC3N,EAAD,OAAWiR,EAAX,EAAWA,UAAX,OACNpL,EAAaH,WAAW1F,GAAQ/G,MAAK,kBAAMgY,QAC/CzD,cAAe,CAAEtU,KAAM,IACvBoV,iBAAkBC,KAAW,CACzBrV,KAAMqV,OAAaC,aAL3B,SAQK,gBAAGV,EAAH,EAAGA,aAAcW,EAAjB,EAAiBA,QAASZ,EAA1B,EAA0BA,aAA1B,OACG,eAAC,KAAD,CAAME,UAAU,UAAhB,SAYI,eAAC,KAAD,CAAOnM,KAAK,OAAZ,SACK,SAAC8K,GAAD,OACG,uBAAKnG,MAAO,CAAEuF,SAAU,YAAxB,UACI,eAACV,EAAA,EAAD,CAAQrB,OAAQ+D,IAChB,mDACIjB,YAAY,uEACZoD,KAAM,GACFvD,EAAMQ,OAHd,IAIIgE,WAAY,SAAAnK,GACM,UAAVA,EAAE1O,KAAmB0O,EAAEoK,UAGb,UAAVpK,EAAE1O,KAAoB0O,EAAEoK,WACxBpK,EAAEC,iBACFyH,GAAWZ,oBAW/C,eAACuD,GAAA,EAAQpI,MAAT,UACKnD,EAAavB,SAASgE,KAAI,SAAAlD,GAAO,OAC9B,gBAACgM,GAAA,EAAD,WACI,eAACA,GAAA,EAAQC,OAAT,CAAgB9J,IAAKnC,EAAQ/I,OAAS,qBACtC,gBAAC+U,GAAA,EAAQ/K,QAAT,WACI,eAAC+K,GAAA,EAAQE,OAAT,CAAgBnK,GAAIC,IAAMC,GAAE,oBAAejC,EAAQ3K,UAAnD,SACK2K,EAAQhJ,cAEb,eAACgV,GAAA,EAAQG,SAAT,UACI,iCAAMC,aAAoBpM,EAAQC,WAAlC,YAEJ,eAAC+L,GAAA,EAAQK,KAAT,CAAclL,MAAO,CAAEmL,WAAY,YAAnC,SAAkDtM,EAAQlM,YATpDkM,EAAQzL,kBCjC/BuM,oBA1Cf,YAA4E,IAAD,IAAxCrM,SAAY2D,EAA4B,EAA5BA,UAAWI,EAAiB,EAAjBA,KACtD,OAAKJ,EAED,gBAAC,WAAD,WACI,gBAACuL,EAAA,EAAD,CACII,UAAU,SACV5C,MAAO,CAAEyK,OAAQ,QACjB9H,SAAS,MACTG,WAAS,EACTgC,UAAQ,EACR1E,MAAM,OANV,UAQKnJ,EAAUmK,OAA6B,IAArBnK,EAAUmK,OAAe,UAAY,UAR5D,YAUA,eAACoB,EAAA,EAAD,CAASG,UAAQ,EAAjB,SACI,eAACd,EAAA,EAAD,CAAMuJ,SAAO,EAACC,SAAO,EAArB,SACKpU,EAAU8K,KAAI,SAAA5J,GAAQ,OACnB,gBAACgK,EAAA,EAAD,CAAMnC,MAAO,CAAEuF,SAAU,YAAzB,UACKpN,EAASjE,YAAT,OAAsBmD,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAMnD,WACzB,eAACwO,EAAA,EAAD,CACI1C,MAAO,CAAEuF,SAAU,YACnBnF,MAAM,SACNmK,OAAO,QAHX,kBAOJ,eAACxJ,EAAA,EAAD,CAAOqB,KAAK,OAAOpB,IAAK7I,EAASrC,OAAT,qBACxB,gBAACqM,EAAA,EAAKrC,QAAN,CAAc0K,cAAc,SAA5B,UACI,eAACrI,EAAA,EAAKlB,OAAN,CAAaL,GAAG,KAAhB,SACI,eAAC,IAAD,CAAME,GAAE,oBAAe3I,EAASjE,UAAhC,SAA6CiE,EAAStC,gBAEzDsC,EAASW,WACN,eAACqJ,EAAA,EAAKmJ,MAAN,CAAYtL,MAAO,CAAEI,MAAO,UAA5B,4BAfgCjI,EAASjE,oBAhBlD,QC2BZyL,oBA3Bf,WAEI,IAAQjC,EAAkB+B,IAAlB/B,cACkBpK,EAAkEoK,EAApFxH,iBAA4B8B,EAAwD0F,EAAxD1F,aAAc3B,EAA0CqH,EAA1CrH,eAAgBuC,EAA0B8E,EAA1B9E,sBAC1DxF,EAAOiW,eAAPjW,GAOR,OALAgR,qBAAU,WAEN,OADIhR,GAAI4E,EAAa5E,GACd,kBAAMwF,OACd,CAACxF,EAAI4E,EAAcY,IAElBvC,IAAmB/C,EAAiB,eAAC,GAAD,IAGpC,gBAAC+Q,EAAA,EAAD,WACI,gBAACA,EAAA,EAAKC,OAAN,CAAarE,MAAO,GAApB,UACI,eAAC,GAAD,CAAwB3M,SAAUA,IAClC,eAAC,GAAD,CAAsBA,SAAUA,IAChC,eAAC,GAAD,CAAsB4K,WAAY5K,EAASF,QAE/C,eAACiR,EAAA,EAAKC,OAAN,CAAarE,MAAO,EAApB,SACI,eAAC,GAAD,CAAyB3M,SAAUA,YCuBpCiY,OAlDf,WAEI,IAEA,EAA4BtH,mBAAS,MAArC,mBAAOxS,EAAP,KAAe4V,EAAf,KA0BA,OACI,gBAAC,WAAD,WACI,eAACpG,EAAA,EAAD,CAAQL,GAAG,KAAKjE,QAAQ,yBACxB,eAAC6F,EAAA,EAAD,UACI,gBAACtC,EAAA,EAAOuC,MAAR,CAAc+I,OAAO,IAArB,UACI,eAACtL,EAAA,EAAD,CAAQK,QA7BD,WACnBnQ,IAAMqC,IAAIgZ,uBAA6B7P,OAAM,SAAAiM,GAAG,OAAIhQ,QAAQC,IAAI+P,EAAI5W,cA4BvB0L,QAAQ,YAAY2D,OAAK,EAACkG,SAAO,IAClE,eAACtG,EAAA,EAAD,CAAQK,QA1BC,WACrBnQ,IAAMqC,IAAIgZ,yBAA+B7P,OAAM,SAAAiM,GAAG,OAAIhQ,QAAQC,IAAI+P,EAAI5W,cAyBvB0L,QAAQ,cAAc2D,OAAK,EAACkG,SAAO,IACtE,eAACtG,EAAA,EAAD,CAAQK,QAXM,WAC1BnQ,IAAMwC,KAAK6Y,iBAAwB,IAAI7P,OAAM,SAAAiM,GAAG,OAAIR,EAAUQ,OAUVlL,QAAQ,mBAAmB2D,OAAK,EAACkG,SAAO,IAChF,eAACtG,EAAA,EAAD,CAAQK,QAxBE,WACtBnQ,IAAMqC,IAAIgZ,0BAAgC7P,OAAM,SAAAiM,GAAG,OAAIhQ,QAAQC,IAAI+P,EAAI5W,cAuBvB0L,QAAQ,eAAe2D,OAAK,EAACkG,SAAO,IACxE,eAACtG,EAAA,EAAD,CAAQK,QArBG,WACvBnQ,IAAMqC,IAAIgZ,0BAAgC7P,OAAM,SAAAiM,GAAG,OAAIhQ,QAAQC,IAAI+P,EAAI5W,cAoBtB0L,QAAQ,eAAe2D,OAAK,EAACkG,SAAO,IACzE,eAACtG,EAAA,EAAD,CAAQK,QAlBF,WAClBnQ,IAAMqC,IAAIgZ,2BAAiC7P,OAAM,SAAAiM,GAAG,OAAIhQ,QAAQC,IAAI+P,OAiBxBlL,QAAQ,WAAW2D,OAAK,EAACkG,SAAO,SAGvE/U,GACG,eAAC,GAAD,CAAkBA,OAAQA,Q,UCjC3BkO,oBAZf,WACI,IAAQ3E,EAAeyE,IAAfzE,WAER,OACI,eAAC0Q,GAAA,EAAD,CAAOjP,KAAMzB,EAAWwB,MAAMC,KAAMkP,QAAS3Q,EAAWC,WAAYmH,KAAK,OAAzE,SACI,eAACsJ,GAAA,EAAM5L,QAAP,UACK9E,EAAWwB,MAAM7J,Y,UCmCnBgN,oBAjCf,YAAkD,IAAvBiM,EAAsB,EAAtBA,YACvB,EAAqDnM,IAA7CJ,aAAgB1K,EAAxB,EAAwBA,QAASD,EAAjC,EAAiCA,cAEjC,OACI,eAAC,KAAD,CACIuS,cAAe,CAAEpR,YAAW,OAAElB,QAAF,IAAEA,OAAF,EAAEA,EAASkB,YAAa0L,IAAG,OAAE5M,QAAF,IAAEA,OAAF,EAAEA,EAAS4M,KAClE6F,SAAU,SAAA3N,GACN/E,EAAc+E,GAAQ/G,MAAK,WACvBkZ,GAAY,OAGpB7D,iBAAkBC,KAAW,CACzBnS,YAAamS,OAAaC,aARlC,SAWK,gBAAGV,EAAH,EAAGA,aAAcW,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,MAA1B,OACG,gBAAC,KAAD,CAAMX,UAAU,UAAhB,UACI,eAAC,GAAD,CAAalB,YAAY,eAAejL,KAAK,gBAC7C,eAAC,GAAD,CAAYqO,KAAM,EAAGpD,YAAY,eAAejL,KAAK,QACrD,eAAC6E,EAAA,EAAD,CACIoF,UAAQ,EACRoC,KAAK,SACLtR,QAASmR,EACT5K,QAAQ,iBACRqG,QAAQ,QACRgB,UAAWkE,IAAYC,aCJhCxI,oBA3Bf,WACI,MAAqDF,IAA7CJ,aAAgB1K,EAAxB,EAAwBA,QAASkX,EAAjC,EAAiCA,cACjC,EAAgC5H,oBAAS,GAAzC,mBAAO9N,EAAP,KAAiByV,EAAjB,KAEA,OACI,eAACE,GAAA,EAAIC,KAAL,UACI,gBAAC1H,EAAA,EAAD,WACI,gBAACA,EAAA,EAAKC,OAAN,CAAarE,MAAM,KAAnB,UACI,eAACgB,EAAA,EAAD,CAAQ+B,QAAQ,OAAOO,KAAK,OAAO5G,QAAO,uBAAWhI,QAAX,IAAWA,OAAX,EAAWA,EAASkB,eAC7DgW,GACG,eAAC3L,EAAA,EAAD,CACI8C,QAAQ,QACR1C,OAAK,EACL3D,QAASxG,EAAW,SAAW,eAC/BoK,QAAS,kBAAMqL,GAAazV,SAIxC,eAACkO,EAAA,EAAKC,OAAN,CAAarE,MAAM,KAAnB,SACK9J,EAAW,eAAC,GAAD,CAAiByV,YAAaA,IACtC,uBAAM5L,MAAO,CAAEmL,WAAY,YAA3B,gBAA0CxW,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAS4M,gB,UCY5DyK,OA9Bf,YAAmD,IAApBC,EAAmB,EAAnBA,SACrBC,EAAW,CACbzB,OAAQ,kBACR9I,YAAa,OACbwK,aAAc,MACdC,WAAY,OACZxJ,UAAW,SACXuH,OAAQ,KAONkC,EAASC,uBAAY,SAAAC,GACvBN,EAASM,EAAcxK,KAAI,SAAC3N,GAAD,OAAec,OAAOC,OAAOf,EAAM,CAC1DoY,QAASC,IAAIC,gBAAgBtY,WAElC,CAAC6X,IACJ,EAAsDU,aAAY,CAAEN,WAA5DO,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAAeC,EAArC,EAAqCA,aAErC,OACI,iDAASF,KAAT,IAAyB5M,MAAO8M,EAAY,2BAAQZ,GAZvC,CACbvK,YAAa,UAWiEuK,EAA9E,UACI,sCAAWW,MACX,eAACpL,EAAA,EAAD,CAAMpG,KAAK,SAAS+G,KAAK,SACzB,eAACnB,EAAA,EAAD,CAAQtE,QAAQ,yB,iBCRboQ,OAjBf,YAAkE,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,WACxC,OACI,eAAC,KAAD,CACIjM,IAAKgM,EACLhN,MAAO,CAAEmK,OAAQ,IAAKlK,MAAO,QAC7BiN,mBAAoB,EACpBC,YAAa,EACbX,QAAQ,eACRY,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIR,EAAWQ,OCmClCC,OA7Cf,YAA6D,IAAhCtX,EAA+B,EAA/BA,QAASjC,EAAsB,EAAtBA,YAClC,EAA0B8P,mBAAc,IAAxC,mBAAO0J,EAAP,KAAc1B,EAAd,KACA,EAA8BhI,qBAA9B,mBAAOwJ,EAAP,KAAgBR,EAAhB,KAcA,OANA7I,qBAAU,WACN,OAAO,WACHuJ,EAAM/W,SAAQ,SAACxC,GAAD,OAAeqY,IAAImB,gBAAgBxZ,EAAKoY,eAE3D,CAACmB,IAGA,gBAACtJ,EAAA,EAAD,WACI,gBAACA,EAAA,EAAKC,OAAN,CAAarE,MAAO,EAApB,UACI,eAACgB,EAAA,EAAD,CAAQkC,KAAG,EAAC/C,MAAM,OAAOzD,QAAQ,uBACjC,eAAC,GAAD,CAAqBsP,SAAUA,OAEnC,eAAC5H,EAAA,EAAKC,OAAN,CAAarE,MAAO,IACpB,gBAACoE,EAAA,EAAKC,OAAN,CAAarE,MAAO,EAApB,UACI,eAACgB,EAAA,EAAD,CAAQkC,KAAG,EAAC/C,MAAM,OAAOzD,QAAQ,0BAChCgR,GAASA,EAAMvM,OAAS,GACrB,eAAC,GAAD,CAAoB6L,WAAYA,EAAYD,aAAcW,EAAM,GAAGnB,aAG3E,eAACnI,EAAA,EAAKC,OAAN,CAAarE,MAAO,IACpB,gBAACoE,EAAA,EAAKC,OAAN,CAAarE,MAAO,EAApB,UACI,eAACgB,EAAA,EAAD,CAAQkC,KAAG,EAAC/C,MAAM,OAAOzD,QAAQ,8BAChCgR,GAASA,EAAMvM,OAAS,GACrB,gBAAC,WAAD,WACI,sBAAKoG,UAAU,cAAcxH,MAAO,CAAE6D,UAAW,IAAKgK,SAAU,YAChE,gBAAC3N,EAAA,EAAOuC,MAAR,CAAc+I,OAAQ,EAAtB,UACI,eAACtL,EAAA,EAAD,CAAQ9J,QAASA,EAASmK,QAhCnC,WACPkN,GACAA,EAAQK,mBAAmBC,QAAO,SAAAC,GAAI,OAAI7Z,EAAY6Z,OA8BK1I,UAAQ,EAAC/B,KAAK,UACzD,eAACrD,EAAA,EAAD,CAAQ8D,SAAU5N,EAASmK,QAAS,kBAAM0L,EAAS,KAAK1I,KAAK,uBCqC1E5D,oBAzEf,YAA4C,IAAD,EAAlBhL,EAAkB,EAAlBA,QACrB,EAAwG8K,IAAhGJ,aAAgBwM,EAAxB,EAAwBA,cAAe1X,EAAvC,EAAuCA,YAAa2I,EAApD,EAAoDA,UAAW1G,EAA/D,EAA+DA,QAAS5B,EAAxE,EAAwEA,aAAcC,EAAtF,EAAsFA,YACtF,EAAwCwP,oBAAS,GAAjD,mBAAOgK,EAAP,KAAqBC,EAArB,KACA,EAA4BjK,mBAAS,IAArC,mBAAOkK,EAAP,KAAeC,EAAf,KAgBA,OACI,eAACtC,GAAA,EAAIC,KAAL,UACI,gBAAC1H,EAAA,EAAD,WACI,gBAACA,EAAA,EAAKC,OAAN,CAAarE,MAAO,GAApB,UACI,eAACgB,EAAA,EAAD,CAAQ+B,QAAQ,OAAOO,KAAK,QAAQ5G,QAAQ,WAC3CkP,GACG,eAAC3L,EAAA,EAAD,CACI8C,QAAQ,QACR1C,OAAK,EACL3D,QAASsR,EAAe,SAAW,YACnC1N,QAAS,kBAAM2N,GAAiBD,SAI5C,eAAC5J,EAAA,EAAKC,OAAN,CAAarE,MAAO,GAApB,SACKgO,EACG,eAAC,GAAD,CAAmB9Z,YA9Bb,SAACC,GACvBD,EAAYC,GAAM1B,MAAK,kBAAMwb,GAAgB,OA6BsB9X,QAAS0G,IAE5D,eAAC6D,EAAA,EAAK8B,MAAN,CAAY4L,YAAa,EAAzB,mBACK1Z,EAAQ4I,cADb,aACK,EAAgBwE,KAAI,SAAAzE,GAAK,OACtB,gBAACqD,EAAA,EAAD,WACI,eAACI,EAAA,EAAD,CAAOC,IAAK1D,EAAM9K,MACjBqZ,GACG,gBAAC3L,EAAA,EAAOuC,MAAR,CAActC,OAAK,EAACqL,OAAQ,EAA5B,UACI,eAACtL,EAAA,EAAD,CACII,OAAK,EACLF,MAAM,QACNzD,QAAQ,OACRtB,KAAM,OAASiC,EAAMlK,GACrB4Q,SAAU1G,EAAME,OAChBpH,QAAS+X,IAAW,OAAS7Q,EAAMlK,IAAMgD,EACzCmK,QAAS,SAAAC,GAAC,OAzC3B,SAAClD,EAAckD,GACtC4N,EAAU5N,EAAE8N,cAAcjT,MAC1B7G,EAAa8I,GAuCyCiR,CAAmBjR,EAAOkD,MAE5C,eAACN,EAAA,EAAD,CACII,OAAK,EACLF,MAAM,MACNmD,KAAK,QACLlI,KAAMiC,EAAMlK,GACZ4Q,SAAU1G,EAAME,OAChBpH,QAAS+X,IAAW7Q,EAAMlK,IAAMgD,EAChCmK,QAAS,SAAAC,GAAC,OA7C5B,SAAClD,EAAckD,GACrC4N,EAAU5N,EAAE8N,cAAcjT,MAC1B5G,EAAY6I,GA2C0CkR,CAAkBlR,EAAOkD,WApB5ClD,EAAMlK,mBC1C3Cqb,GAAQ,CACV,CAAEC,SAAU,gBAAiBC,KAAM,CAAE7c,IAAK,WAC1C,CAAE4c,SAAU,cAAeC,KAAM,CAAE7c,IAAK,SACxC,CAAE4c,SAAU,UAAWC,KAAM,CAAE7c,IAAK,aAsDzB6N,oBAnDf,WACI,MAA6FF,IAArFJ,aAAgBxB,EAAxB,EAAwBA,mBAAoBlJ,EAA5C,EAA4CA,QAASwI,EAArD,EAAqDA,kBAAmBD,EAAxE,EAAwEA,eAUxE,OARAkH,qBAAU,WACNvG,EAAmBlJ,EAAST,YAC7B,CAAC2J,EAAoBlJ,IAOpB,eAACmX,GAAA,EAAIC,KAAL,CAAU3V,QAAS+G,EAAnB,SACI,gBAACkH,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAarE,MAAO,GAApB,SACI,eAACgB,EAAA,EAAD,CAAQ+B,QAAQ,OAAOO,KAAK,WAAW5G,QAAS,iBAEpD,gBAAC0H,EAAA,EAAKC,OAAN,CAAarE,MAAO,GAApB,UACI,eAAC6L,GAAA,EAAD,CACI2C,MAAOA,GACPG,KAAM,CAAE9L,WAAW,EAAM6C,UAAU,GACnCkJ,YAAa,SAACrO,EAAG1Q,GAAJ,OAdT,SAAC0Q,EAAmB1Q,GACxC+N,EAAmBlJ,EAAST,SAAUua,GAAM3e,EAAKgf,aAAuBH,KAAK7c,KAanCid,CAAgBvO,EAAG1Q,MAEjD,wBACA,eAAC6Q,EAAA,EAAK8B,MAAN,CAAY4L,YAAa,EAAzB,SACKnR,EAAe6E,KAAI,SAACzO,GAAD,OAChB,gBAACqN,EAAA,EAAD,CACIC,GAAIC,IACJC,GAAE,sBAAiBxN,EAASF,IAFhC,UAKI,eAAC2N,EAAA,EAAD,CACIC,IAAG,iCAA4B1N,EAASiC,SAArC,QACHyK,MAAO,CAAE6D,UAAW,IAAKmL,UAAW,WAExC,gBAACrO,EAAA,EAAKb,QAAN,WACI,eAACa,EAAA,EAAKM,OAAN,CAAa2B,UAAU,SAAvB,SAAiCtP,EAASgC,QAC1C,gBAACqL,EAAA,EAAKsO,KAAN,CAAWrM,UAAU,SAArB,UACI,+BAAM5I,kBAAO,IAAIxC,KAAKlE,EAASmC,MAAO,YACtC,+BAAMuE,kBAAO,IAAIxC,KAAKlE,EAASmC,MAAO,oBAVzCnC,EAASF,oBCb/BuM,oBAzBf,WACI,MAAgFF,IAAxEJ,aAAgB1K,EAAxB,EAAwBA,QAASoI,EAAjC,EAAiCA,WAAYC,EAA7C,EAA6CA,kBAAmBC,EAAhE,EAAgEA,UAEhE,OACI,eAAC6O,GAAA,EAAIC,KAAL,CAAU3V,QAAS4G,EAAnB,SACI,gBAACqH,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAarE,MAAO,GAApB,SACI,eAACgB,EAAA,EAAD,CACI+B,QAAQ,OACRO,KAAK,OACL5G,QAAuB,IAAdM,EAAA,kCAAsCtI,QAAtC,IAAsCA,OAAtC,EAAsCA,EAASkB,aAA/C,wBAAyElB,QAAzE,IAAyEA,OAAzE,EAAyEA,EAASkB,YAAlF,qBAGjB,eAACwO,EAAA,EAAKC,OAAN,CAAarE,MAAO,GAApB,SACI,eAACU,EAAA,EAAK8B,MAAN,CAAY4L,YAAa,EAAzB,SACKtR,EAAWgF,KAAI,SAAApN,GAAO,OACnB,eAAC,GAAD,CAAoCA,QAASA,GAA3BA,EAAQT,yBCavCyL,oBArBf,YAA6C,IAAnBhL,EAAkB,EAAlBA,QACd0K,EAAiBI,IAAjBJ,aAEFoP,EAAQ,CACV,CAAEC,SAAU,QAASxI,OAAQ,kBAAM,eAAC,GAAD,MACnC,CAAEwI,SAAU,SAAUxI,OAAQ,kBAAM,eAAC,GAAD,CAAevR,QAASA,MAC5D,CAAE+Z,SAAU,SAAUxI,OAAQ,kBAAM,eAAC,GAAD,MACpC,CAAEwI,SAAU,YAAaxI,OAAQ,kBAAM,eAAC,GAAD,MACvC,CAAEwI,SAAU,YAAaxI,OAAQ,kBAAM,eAAC,GAAD,OAG3C,OACI,eAAC4F,GAAA,EAAD,CACI8C,KAAM,CAAEzO,OAAO,EAAMkD,UAAU,GAC/B6L,aAAa,QACbT,MAAOA,EACPI,YAAa,SAACrO,EAAG1Q,GAAJ,OAAauP,EAAajC,aAAatN,EAAKgf,mB,UCOtDnP,oBA3Bf,YAA4C,IAAnBhL,EAAkB,EAAlBA,QACrB,OACI,eAAC6N,EAAA,EAAD,UACI,gBAAC6B,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAarE,MAAO,GAApB,SACI,eAACkC,EAAA,EAAKM,MAAN,UACI,gBAACN,EAAA,EAAD,WACI,eAACA,EAAA,EAAKpB,MAAN,CAAYyE,QAAM,EAACpD,KAAK,QAAQpB,IAAKrM,EAAQmB,OAAR,qBACrC,eAACqM,EAAA,EAAKrC,QAAN,CAAc0K,cAAc,SAA5B,SACI,eAACvJ,EAAA,EAAD,CAAQL,GAAG,KAAKjE,QAAShI,EAAQkB,uBAKjD,gBAACwO,EAAA,EAAKC,OAAN,CAAarE,MAAO,EAApB,UACI,gBAACkP,GAAA,EAAU1M,MAAX,CAAiB+I,OAAQ,EAAzB,UACI,eAAC2D,GAAA,EAAD,CAAWnI,MAAM,YAAYtQ,MAAO/B,EAAQoE,iBAC5C,eAACoW,GAAA,EAAD,CAAWnI,MAAM,YAAYtQ,MAAO/B,EAAQgJ,oBAEhD,eAACyK,GAAA,EAAD,IACA,eAAC,GAAD,CAAczT,QAASA,eCM5BgL,oBA1Bf,WACI,IAAQzL,EAAamV,eAAbnV,SACR,EAAiFuL,IAAzEJ,aAAgBxC,EAAxB,EAAwBA,eAAgBQ,EAAxC,EAAwCA,YAAa1I,EAArD,EAAqDA,QAASyI,EAA9D,EAA8DA,aAS9D,OAPAgH,qBAAU,WAEN,OADA/G,EAAYnJ,GACL,WACHkJ,EAAa,MAElB,CAACC,EAAanJ,EAAUkJ,IAEvBP,EAAuB,eAAC,GAAD,CAAmBF,QAAQ,wBAGlD,eAAC0H,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,OAAN,CAAarE,MAAO,GAApB,SACKtL,GACG,gBAAC,WAAD,WACI,eAAC,GAAD,CAAeA,QAASA,IACxB,eAAC,GAAD,CAAgBA,QAASA,cCiClCgL,oBA1Cf,WACE,IAAMyP,EAAWC,eACjB,EAAmC5P,IAA3B3O,EAAR,EAAQA,YAAamB,EAArB,EAAqBA,UAUrB,OARAmS,qBAAU,WACJtT,EAAYF,MACdqB,EAAUiJ,UAAUoU,SAAQ,kBAAMxe,EAAYyJ,kBAE9CtI,EAAUqJ,yBAAyB5I,MAAK,kBAAM5B,EAAYyJ,oBAE3D,CAACzJ,EAAamB,IAEZnB,EAAYuJ,UAGf,gBAAC,WAAD,WACE,eAAC,IAAD,CAAgBkL,SAAS,eAAegK,iBAAe,IACvD,eAAC,GAAD,IACA,eAAC,KAAD,CAAOrK,OAAK,EAACsK,KAAK,IAAIzJ,UAAW0J,KACjC,eAAC,KAAD,CACED,KAAM,QACNtJ,OAAQ,kBACN,gBAAC,WAAD,WACE,eAAC,GAAD,IACA,eAAClB,GAAA,EAAD,CAAWhF,MAAO,CAAEsD,UAAW,OAA/B,SACE,gBAAC,KAAD,WACE,eAAC,GAAD,CAAc4B,OAAK,EAACsK,KAAK,cAAczJ,UAAW2J,KAClD,eAAC,GAAD,CAAcF,KAAK,kBAAkBzJ,UAAW4J,KAChD,eAAC,GAAD,CAAiCH,KAAM,CAAC,kBAAmB,eAAgBzJ,UAAW6J,IAAnER,EAAStd,KAC5B,eAAC,GAAD,CAAc0d,KAAK,sBAAsBzJ,UAAW8J,KACpD,eAAC,GAAD,CAAcL,KAAK,UAAUzJ,UAAWwF,KACxC,eAAC,KAAD,CAAOiE,KAAK,gBAAgBzJ,UAAW+J,KACvC,eAAC,KAAD,CAAO/J,UAAWM,mBApBG,eAAC,GAAD,CAAmB1J,QAAQ,sBCjBjDoT,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBvd,MAAK,YAAkD,IAA/Cwd,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCICO,OAVf,WACI,IAAQC,EAAanB,eAAbmB,SAMR,OAJApM,qBAAU,WACNlK,OAAOuW,SAAS,EAAG,KACpB,CAACD,IAEG,MCGE7e,GAAU+e,eAEvBC,IAASzK,OACP,eAAC3G,EAAaqR,SAAd,CAAuBla,MAAO7F,EAA9B,SACE,gBAAC,KAAD,CAAQc,QAASA,GAAjB,UACE,eAAC,GAAD,IACA,eAAC,GAAD,SAGJkf,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.8b6eedf7.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config, headers } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateError = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateError.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateError.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            if (status === 401 && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again');\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/Activities', { params }).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/Activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/Activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/Activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/Activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/Activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/Account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/Account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/Account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/Account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {}),\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from './profile';\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { format } from 'date-fns';\r\nimport { store } from './store';\r\nimport { Profile } from '../models/profile';\r\nimport { Pagination, PagingParams } from '../models/pagination';\r\n\r\nclass ActivityStore {\r\n    activities = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activities.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activities.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy')\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        );\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(a => a.username === user.username)\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activities.set(activity.id, activity);\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activities.get(id);\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                });\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity };\r\n                    this.activities.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activities.delete(id);\r\n                this.loading = false;\r\n\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a =>\r\n                        a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activities.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activities.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activities.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport default ActivityStore;","import { ServerError } from '../models/serverError';\r\nimport { makeAutoObservable, reaction } from 'mobx';\r\n\r\nclass CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}\r\n\r\nexport default CommonStore;","import { User, UserFormValues } from '../models/user';\r\nimport agent from '../api/agent';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { store } from './store';\r\nimport { history } from '../..';\r\n\r\nclass UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() =>\r\n                this.user = user\r\n            );\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() =>\r\n                this.user = user\r\n            );\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, { scope: 'public_profile,email' })\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport default UserStore;","import { makeAutoObservable } from 'mobx';\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nclass ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null,\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}\r\n\r\nexport default ModalStore;","import { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport { store } from './store'\r\nimport agent from '../api/agent';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\n\r\nclass ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default ProfileStore;","import { ChatComment } from '../models/comment';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { store } from './store';\r\n\r\nclass CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on(\"ReceiveComment\", (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log(\"Error stopping connection: \", error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport default CommentStore;","import { createContext, useContext } from 'react';\r\nimport ActivityStore from './activityStore';\r\nimport CommonStore from './commonStore';\r\nimport UserStore from './userStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './profileStore';\r\nimport CommentStore from './commentStore';\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import React, { SyntheticEvent } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { Profile } from '../../app/models/profile';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction FollowButton({ profile }: Props) {\r\n    const { profileStore: { updateFollowing, loading }, userStore } = useStore();\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    const handleFollow = (e: SyntheticEvent, username: string) => {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not following'}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n}\r\n\r\nexport default observer(FollowButton);","import { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfileCard({ profile }: Props) {\r\n    const truncate = (str: string | undefined) => {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileCard);","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n\r\n}\r\n\r\nfunction ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'aquamarine',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image\r\n                                size='mini'\r\n                                circular\r\n                                src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityListItemAttendee);","import { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nfunction ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{ marginBottom: 3 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' />{format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' />{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default ActivityListItem;","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nfunction ActivityList() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityList);","import { Fragment } from 'react'\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport Calendar from 'react-calendar';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nfunction ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n\r\n    return (\r\n        <Fragment>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 30 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityFilters);","import { Fragment } from 'react';\r\nimport { Button, Placeholder, Segment } from 'semantic-ui-react';\r\n\r\nfunction ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ActivityListItemPlaceholder;","import { Fragment, useEffect, useState } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nfunction ActivityDashboard() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activities, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    const handleGetNext = () => {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activities.size <= 1) loadActivities();\r\n    }, [activities.size, loadActivities]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <Fragment>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </Fragment>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDashboard);","import { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nfunction NavBar() {\r\n    const { userStore } = useStore();\r\n    const { user, logout } = userStore;\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default observer(NavBar);","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PrivateRoute;","import { observer } from 'mobx-react-lite';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nfunction ServerError() {\r\n\r\n    const { commonStore } = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default observer(ServerError);","import { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nfunction NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - We looked everywhere and could not find this\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default NotFound;","import { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nfunction MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default MyTextInput;","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nfunction LoginForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n                setErrors({ error: 'Invalid email or password' }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(LoginForm);","import { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nfunction ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>\r\n                            {err}\r\n                        </Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}\r\n\r\nexport default ValidationErrors;","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nfunction RegisterForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button\r\n                        disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting}\r\n                        positive\r\n                        content='Register'\r\n                        type='submit'\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(RegisterForm);","import { Fragment } from 'react';\r\nimport { Button, Container, Divider, Header, Image, Segment } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nfunction HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <Fragment>\r\n                        <Header as='h2' inverted content='Welcome to reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </Fragment>\r\n                ) : (\r\n                    <Fragment>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button\r\n                            loading={userStore.fbLoading}\r\n                            size='huge'\r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with facebook'\r\n                            onClick={userStore.facebookLogin}\r\n                        />\r\n                    </Fragment>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(HomePage);","import { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nfunction LoadingComponents({ inverted = true, content = 'Loading...' }: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}\r\n\r\nexport default LoadingComponents;","import { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nfunction MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default MyTextArea;","import { useField } from 'formik';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nfunction MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default MySelectInput;","export const categoryOptions = [\r\n    { text: 'Drinks', value: 'drinks' },\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    { text: 'Travel', value: 'travel' },\r\n]","import { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\nfunction MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport default MyDateInput;","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponents from '../../../app/layout/LoadingComponents';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { v4 as uuid } from 'uuid';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nfunction ActivityForm() {\r\n\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        }\r\n        else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponents content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        {/* <FormField>\r\n                            <MyTextInput placeholder='Title' name='title' />\r\n                            <ErrorMessage name='title' render={error => <Label basic color='red' content={error} />} />\r\n                        </FormField> */}\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button disabled={isSubmitting || !dirty || !isValid} loading={isSubmitting} floated='right' positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityForm);","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Image, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nfunction ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong></p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <Fragment>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activiate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading} />\r\n                        <Button\r\n                            disabled={activity.isCancelled}\r\n                            as={Link} to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </Fragment>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel Attendance</Button>) : (\r\n                    <Button\r\n                        disabled={activity.isCancelled}\r\n                        loading={loading}\r\n                        onClick={updateAttendance}\r\n                        color='teal'\r\n                    >\r\n                        Join Activity\r\n                    </Button>)}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedHeader);","import { observer } from 'mobx-react-lite';\r\nimport { Grid, Icon, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { format } from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nfunction ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='info' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedInfo);","import { formatDistanceToNow } from 'date-fns';\r\nimport { Field, FieldProps, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Fragment, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Comment, Header, Loader, Segment } from 'semantic-ui-react';\r\nimport * as Yup from 'yup';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nfunction ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            {/* <MyTextArea placeholder='Add comments' name='body' rows={3} />\r\n                                <Button\r\n                                    loading={isSubmitting}\r\n                                    disabled={isSubmitting || !isValid}\r\n                                    content='Add Reply'\r\n                                    labelPosition='left'\r\n                                    icon='edit'\r\n                                    primary\r\n                                    type='submit'\r\n                                    floated='right'\r\n                                /> */}\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (\"ENTER\" to submit, \"SHIFT + ENTER\" for new line)'\r\n                                            rows={3}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedChat);","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, Item, Label, List, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nfunction ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length}{attendees.length === 1 ? ' Person' : ' People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || `/assets/user.png`} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedSidebar);","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponents from '../../../app/layout/LoadingComponents';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nfunction ActivityDetails() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponents />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails);","import axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\nimport { Fragment, useState } from 'react';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\n\r\nfunction TestError() {\r\n\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    const handleNotFound = () => {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    const handleBadRequest = () => {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    const handleServerError = () => {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    const handleUnauthorised = () => {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    const handleBadGuid = () => {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    const handleValidationError = () => {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Header as='h1' content='Test Error Component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default TestError;","import { observer } from 'mobx-react-lite';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nfunction ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default observer(ModalContainer);","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nfunction ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={5} placeholder='Add your bio' name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileEditForm);","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nfunction ProfileAbout() {\r\n    const { profileStore: { profile, isCurrentUser } } = useStore();\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileAbout);","import { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nfunction PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PhotoWidgetDropzone;","import { Cropper } from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nfunction PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: \"100%\" }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PhotoWidgetCropper;","import { Fragment, useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nfunction PhotoUploadWidget({ loading, uploadPhoto }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    const onCrop = () => {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <Fragment>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </Fragment>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default PhotoUploadWidget;","import { SyntheticEvent, useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    const handlePhotoUpload = (file: Blob) => {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    const handleSetMainPhoto = (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) => {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    const handleDeletePhoto = (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) => {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                name={photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePhotos);","import { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nfunction ProfileActivities() {\r\n    const { profileStore: { loadUserActivities, profile, loadingActivities, userActivities } } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileActivities);","import { observer } from 'mobx-react-lite';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nfunction ProfileFollowings() {\r\n    const { profileStore: { profile, followings, loadingFollowings, activeTab } } = useStore();\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileFollowings);","import { observer } from 'mobx-react-lite';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfileContent({ profile }: Props) {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default observer(ProfileContent);","import { observer } from 'mobx-react-lite';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || `/assets/user.png`} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileHeader);","import { observer } from 'mobx-react-lite';\r\nimport { Fragment, useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponents from '../../app/layout/LoadingComponents';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nfunction ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore: { loadingProfile, loadProfile, profile, setActiveTab } } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponents content='Loading Profile ...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <Fragment>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </Fragment>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ProfilePage);","import { Fragment, useEffect } from 'react';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, useLocation, Switch } from 'react-router-dom';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestError from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponents from './LoadingComponents';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const { commonStore, userStore } = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\r\n    }\r\n  }, [commonStore, userStore]);\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponents content='Loading app...' />\r\n\r\n  return (\r\n    <Fragment>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <Fragment>\r\n            <NavBar />\r\n            <Container style={{ marginTop: '7em' }}>\r\n              <Switch>\r\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                <PrivateRoute path='/errors' component={TestError} />\r\n                <Route path='/server-error' component={ServerError} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </Fragment>\r\n        )}\r\n      />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nfunction ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default ScrollToTop;","import ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}